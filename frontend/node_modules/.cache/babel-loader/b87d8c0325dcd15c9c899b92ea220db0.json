{"ast":null,"code":"var _jsxFileName = \"/Users/vbondarets/Desktop/usof_ucode/usof_frontend/vbondarets/usof-client/src/pages/Posts.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport PostSevice from '../API/PostService';\nimport PostFilter from '../components/PostFilter';\nimport PostForm from '../components/PostForm';\nimport PostList from '../components/PostList';\nimport MyButton from '../components/UI/button/MyButton';\nimport Loader from '../components/UI/Loader/Loader';\nimport MyModal from '../components/UI/MyModal/MyModal';\nimport Pagination from '../components/UI/pagination/Pagination';\nimport { useFetching } from '../hooks/useFetching';\nimport { usePosts } from '../hooks/usePost';\nimport '../styles/app.css';\nimport { getPagesArray, getPagesCount } from '../utils/pages';\nimport { getPostsFromPage } from '../utils/postCounter';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Posts() {\n  _s();\n\n  const [posts, setPosts] = useState([]);\n  const [filter, setFilter] = useState({\n    sort: '',\n    query: ''\n  });\n  const [modal, setModal] = useState(false);\n  const [totalPages, setTotalPages] = useState(0);\n  const [limit, setLimit] = useState(10);\n  const [page, setPage] = useState(1);\n  const [createNewPost, setCreateNewPost] = useState({});\n  let TitleSetter;\n  let ContentSetter;\n  const [fetchPosts, isPostLoading, postError] = useFetching(async () => {\n    let response = await PostSevice.getAll();\n    response.data.posts.forEach(el => {\n      let string = el.publishDate;\n      let stringArr = string.split(\"T\");\n      stringArr = stringArr[0].split(\"-\");\n      el.publishDate = stringArr.join(\" \");\n    });\n    let newPostArr = getPostsFromPage(limit, page, response.data.posts);\n    setPosts(newPostArr);\n    const totalCount = response.data.posts.length;\n    setTotalPages(getPagesCount(totalCount, limit));\n  });\n  const [fetchCreatePost, isCreatePostLoading, CreatePostError] = useFetching(async newPost => {\n    console.log(newPost);\n    const response = await PostSevice.createPost(createNewPost);\n    console.log(response.data);\n\n    if (response.data.resp === \"Created\") {\n      TitleSetter(\"\");\n      ContentSetter(\"\");\n      setModal(false);\n      setCreateNewPost({});\n      fetchPosts();\n    } else {\n      console.log(\"Error\", response.data);\n    }\n\n    console.log(response.data.resp);\n    return response.data.resp;\n  });\n\n  function createPost(newPost, setTitle, setContent) {\n    setCreateNewPost(newPost);\n    TitleSetter = setTitle;\n    ContentSetter = setContent;\n    fetchCreatePost(newPost);\n  }\n\n  const removePost = id => {\n    setPosts(posts.filter(p => p.id !== id));\n  };\n\n  const sortedAndSearchedPosts = usePosts(posts, filter.sort, filter.query);\n  useEffect(() => {\n    fetchPosts();\n  }, [page]);\n\n  const changePage = page => {\n    setPage(page);\n  };\n\n  const isAuth = useSelector(state => state.status);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [isAuth && /*#__PURE__*/_jsxDEV(MyButton, {\n      onClick: () => setModal(true),\n      children: \"Create post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(MyModal, {\n      visible: modal,\n      setVisible: setModal,\n      children: /*#__PURE__*/_jsxDEV(PostForm, {\n        create: createPost\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n      style: {\n        margin: '15px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PostFilter, {\n      filter: filter,\n      setFilter: setFilter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), postError && /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Ops, something wrong: \", postError]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this), isPostLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loaderDiv\",\n      children: /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 40\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(PostList, {\n      remove: removePost,\n      posts: sortedAndSearchedPosts,\n      title: \"Post list\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n      page: page,\n      changePage: changePage,\n      totalPages: totalPages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Posts, \"LGTUB09JslzZSa/Bwnym06vzgiM=\", false, function () {\n  return [useFetching, useFetching, usePosts, useSelector];\n});\n\n_c = Posts;\nexport default Posts;\n\nvar _c;\n\n$RefreshReg$(_c, \"Posts\");","map":{"version":3,"names":["React","useEffect","useState","useSelector","PostSevice","PostFilter","PostForm","PostList","MyButton","Loader","MyModal","Pagination","useFetching","usePosts","getPagesArray","getPagesCount","getPostsFromPage","Posts","posts","setPosts","filter","setFilter","sort","query","modal","setModal","totalPages","setTotalPages","limit","setLimit","page","setPage","createNewPost","setCreateNewPost","TitleSetter","ContentSetter","fetchPosts","isPostLoading","postError","response","getAll","data","forEach","el","string","publishDate","stringArr","split","join","newPostArr","totalCount","length","fetchCreatePost","isCreatePostLoading","CreatePostError","newPost","console","log","createPost","resp","setTitle","setContent","removePost","id","p","sortedAndSearchedPosts","changePage","isAuth","state","status","margin"],"sources":["/Users/vbondarets/Desktop/usof_ucode/usof_frontend/vbondarets/usof-client/src/pages/Posts.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport PostSevice from '../API/PostService';\nimport PostFilter from '../components/PostFilter';\nimport PostForm from '../components/PostForm';\nimport PostList from '../components/PostList';\nimport MyButton from '../components/UI/button/MyButton';\nimport Loader from '../components/UI/Loader/Loader';\nimport MyModal from '../components/UI/MyModal/MyModal';\nimport Pagination from '../components/UI/pagination/Pagination';\nimport { useFetching } from '../hooks/useFetching';\nimport { usePosts } from '../hooks/usePost';\nimport '../styles/app.css'\nimport { getPagesArray, getPagesCount } from '../utils/pages';\nimport { getPostsFromPage } from '../utils/postCounter';\n\nfunction Posts() {\n\n  const [posts, setPosts] = useState([]);\n  const [filter, setFilter] = useState({ sort: '', query: '' });\n  const [modal, setModal] = useState(false);\n  const [totalPages, setTotalPages] = useState(0);\n  const [limit, setLimit] = useState(10);\n  const [page, setPage] = useState(1);\n  const [createNewPost, setCreateNewPost] = useState({});\n  let TitleSetter;\n  let ContentSetter;\n\n  const [fetchPosts, isPostLoading, postError] = useFetching(async () => {\n    let response = await PostSevice.getAll();\n    response.data.posts.forEach(el => {\n      let string = el.publishDate;\n      let stringArr = string.split(\"T\");\n      stringArr = stringArr[0].split(\"-\");\n      el.publishDate = stringArr.join(\" \");\n    });\n    let newPostArr = getPostsFromPage(limit, page, response.data.posts);\n    setPosts(newPostArr);\n    const totalCount = response.data.posts.length;\n    setTotalPages(getPagesCount(totalCount, limit))\n  });\n  const [fetchCreatePost, isCreatePostLoading, CreatePostError] = useFetching(async (newPost) => {\n    console.log(newPost);\n    const response = await PostSevice.createPost(createNewPost);\n    console.log(response.data);\n    if (response.data.resp === \"Created\") {\n      TitleSetter(\"\");\n      ContentSetter(\"\");\n      setModal(false);\n      setCreateNewPost({});\n      fetchPosts();\n    }\n    else{\n      console.log(\"Error\", response.data);\n    }\n    console.log(response.data.resp);\n    return response.data.resp;\n  });\n\n  function createPost (newPost, setTitle, setContent){\n    setCreateNewPost(newPost);\n    \n    TitleSetter = setTitle;\n    ContentSetter = setContent;\n    fetchCreatePost(newPost);\n  }\n  const removePost = (id) => {\n    setPosts(posts.filter(p => p.id !== id))\n\n  }\n  const sortedAndSearchedPosts = usePosts(posts, filter.sort, filter.query);\n\n  useEffect(() => {\n    fetchPosts();\n  }, [page]);\n  const changePage = (page) => {\n    setPage(page);\n  }\n  const isAuth = useSelector(state => state.status);\n\n\n  return (\n    <div className=\"App\">\n      {/* <MyButton onClick={fetchPosts}>Get Posts</MyButton> */}\n      {isAuth &&\n        <MyButton onClick={() => setModal(true)}>\n          Create post\n        </MyButton>\n      }\n      <MyModal visible={modal} setVisible={setModal}>\n        <PostForm create={createPost} />\n      </MyModal>\n      <hr style={{ margin: '15px' }} />\n      <PostFilter\n        filter={filter}\n        setFilter={setFilter}\n      />\n      {postError &&\n        <h1>Ops, something wrong: {postError}</h1>\n      }\n      {isPostLoading\n        ? <div className={\"loaderDiv\"}><Loader /></div>\n        : <PostList remove={removePost} posts={sortedAndSearchedPosts} title={\"Post list\"} />\n      }\n      <Pagination\n        page={page}\n        changePage={changePage}\n        totalPages={totalPages}\n      />\n    </div>\n  );\n}\n\nexport default Posts;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,UAAP,MAAuB,oBAAvB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,kCAArB;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,OAAOC,OAAP,MAAoB,kCAApB;AACA,OAAOC,UAAP,MAAuB,wCAAvB;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,OAAO,mBAAP;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,gBAA7C;AACA,SAASC,gBAAT,QAAiC,sBAAjC;;;AAEA,SAASC,KAAT,GAAiB;EAAA;;EAEf,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBjB,QAAQ,CAAC,EAAD,CAAlC;EACA,MAAM,CAACkB,MAAD,EAASC,SAAT,IAAsBnB,QAAQ,CAAC;IAAEoB,IAAI,EAAE,EAAR;IAAYC,KAAK,EAAE;EAAnB,CAAD,CAApC;EACA,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBvB,QAAQ,CAAC,KAAD,CAAlC;EACA,MAAM,CAACwB,UAAD,EAAaC,aAAb,IAA8BzB,QAAQ,CAAC,CAAD,CAA5C;EACA,MAAM,CAAC0B,KAAD,EAAQC,QAAR,IAAoB3B,QAAQ,CAAC,EAAD,CAAlC;EACA,MAAM,CAAC4B,IAAD,EAAOC,OAAP,IAAkB7B,QAAQ,CAAC,CAAD,CAAhC;EACA,MAAM,CAAC8B,aAAD,EAAgBC,gBAAhB,IAAoC/B,QAAQ,CAAC,EAAD,CAAlD;EACA,IAAIgC,WAAJ;EACA,IAAIC,aAAJ;EAEA,MAAM,CAACC,UAAD,EAAaC,aAAb,EAA4BC,SAA5B,IAAyC1B,WAAW,CAAC,YAAY;IACrE,IAAI2B,QAAQ,GAAG,MAAMnC,UAAU,CAACoC,MAAX,EAArB;IACAD,QAAQ,CAACE,IAAT,CAAcvB,KAAd,CAAoBwB,OAApB,CAA4BC,EAAE,IAAI;MAChC,IAAIC,MAAM,GAAGD,EAAE,CAACE,WAAhB;MACA,IAAIC,SAAS,GAAGF,MAAM,CAACG,KAAP,CAAa,GAAb,CAAhB;MACAD,SAAS,GAAGA,SAAS,CAAC,CAAD,CAAT,CAAaC,KAAb,CAAmB,GAAnB,CAAZ;MACAJ,EAAE,CAACE,WAAH,GAAiBC,SAAS,CAACE,IAAV,CAAe,GAAf,CAAjB;IACD,CALD;IAMA,IAAIC,UAAU,GAAGjC,gBAAgB,CAACY,KAAD,EAAQE,IAAR,EAAcS,QAAQ,CAACE,IAAT,CAAcvB,KAA5B,CAAjC;IACAC,QAAQ,CAAC8B,UAAD,CAAR;IACA,MAAMC,UAAU,GAAGX,QAAQ,CAACE,IAAT,CAAcvB,KAAd,CAAoBiC,MAAvC;IACAxB,aAAa,CAACZ,aAAa,CAACmC,UAAD,EAAatB,KAAb,CAAd,CAAb;EACD,CAZyD,CAA1D;EAaA,MAAM,CAACwB,eAAD,EAAkBC,mBAAlB,EAAuCC,eAAvC,IAA0D1C,WAAW,CAAC,MAAO2C,OAAP,IAAmB;IAC7FC,OAAO,CAACC,GAAR,CAAYF,OAAZ;IACA,MAAMhB,QAAQ,GAAG,MAAMnC,UAAU,CAACsD,UAAX,CAAsB1B,aAAtB,CAAvB;IACAwB,OAAO,CAACC,GAAR,CAAYlB,QAAQ,CAACE,IAArB;;IACA,IAAIF,QAAQ,CAACE,IAAT,CAAckB,IAAd,KAAuB,SAA3B,EAAsC;MACpCzB,WAAW,CAAC,EAAD,CAAX;MACAC,aAAa,CAAC,EAAD,CAAb;MACAV,QAAQ,CAAC,KAAD,CAAR;MACAQ,gBAAgB,CAAC,EAAD,CAAhB;MACAG,UAAU;IACX,CAND,MAOI;MACFoB,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBlB,QAAQ,CAACE,IAA9B;IACD;;IACDe,OAAO,CAACC,GAAR,CAAYlB,QAAQ,CAACE,IAAT,CAAckB,IAA1B;IACA,OAAOpB,QAAQ,CAACE,IAAT,CAAckB,IAArB;EACD,CAhB0E,CAA3E;;EAkBA,SAASD,UAAT,CAAqBH,OAArB,EAA8BK,QAA9B,EAAwCC,UAAxC,EAAmD;IACjD5B,gBAAgB,CAACsB,OAAD,CAAhB;IAEArB,WAAW,GAAG0B,QAAd;IACAzB,aAAa,GAAG0B,UAAhB;IACAT,eAAe,CAACG,OAAD,CAAf;EACD;;EACD,MAAMO,UAAU,GAAIC,EAAD,IAAQ;IACzB5C,QAAQ,CAACD,KAAK,CAACE,MAAN,CAAa4C,CAAC,IAAIA,CAAC,CAACD,EAAF,KAASA,EAA3B,CAAD,CAAR;EAED,CAHD;;EAIA,MAAME,sBAAsB,GAAGpD,QAAQ,CAACK,KAAD,EAAQE,MAAM,CAACE,IAAf,EAAqBF,MAAM,CAACG,KAA5B,CAAvC;EAEAtB,SAAS,CAAC,MAAM;IACdmC,UAAU;EACX,CAFQ,EAEN,CAACN,IAAD,CAFM,CAAT;;EAGA,MAAMoC,UAAU,GAAIpC,IAAD,IAAU;IAC3BC,OAAO,CAACD,IAAD,CAAP;EACD,CAFD;;EAGA,MAAMqC,MAAM,GAAGhE,WAAW,CAACiE,KAAK,IAAIA,KAAK,CAACC,MAAhB,CAA1B;EAGA,oBACE;IAAK,SAAS,EAAC,KAAf;IAAA,WAEGF,MAAM,iBACL,QAAC,QAAD;MAAU,OAAO,EAAE,MAAM1C,QAAQ,CAAC,IAAD,CAAjC;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAHJ,eAOE,QAAC,OAAD;MAAS,OAAO,EAAED,KAAlB;MAAyB,UAAU,EAAEC,QAArC;MAAA,uBACE,QAAC,QAAD;QAAU,MAAM,EAAEiC;MAAlB;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QAPF,eAUE;MAAI,KAAK,EAAE;QAAEY,MAAM,EAAE;MAAV;IAAX;MAAA;MAAA;MAAA;IAAA,QAVF,eAWE,QAAC,UAAD;MACE,MAAM,EAAElD,MADV;MAEE,SAAS,EAAEC;IAFb;MAAA;MAAA;MAAA;IAAA,QAXF,EAeGiB,SAAS,iBACR;MAAA,qCAA2BA,SAA3B;IAAA;MAAA;MAAA;MAAA;IAAA,QAhBJ,EAkBGD,aAAa,gBACV;MAAK,SAAS,EAAE,WAAhB;MAAA,uBAA6B,QAAC,MAAD;QAAA;QAAA;QAAA;MAAA;IAA7B;MAAA;MAAA;MAAA;IAAA,QADU,gBAEV,QAAC,QAAD;MAAU,MAAM,EAAEyB,UAAlB;MAA8B,KAAK,EAAEG,sBAArC;MAA6D,KAAK,EAAE;IAApE;MAAA;MAAA;MAAA;IAAA,QApBN,eAsBE,QAAC,UAAD;MACE,IAAI,EAAEnC,IADR;MAEE,UAAU,EAAEoC,UAFd;MAGE,UAAU,EAAExC;IAHd;MAAA;MAAA;MAAA;IAAA,QAtBF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AA8BD;;GA/FQT,K;UAYwCL,W,EAaiBA,W,EA6BjCC,Q,EAQhBV,W;;;KA9DRc,K;AAiGT,eAAeA,KAAf"},"metadata":{},"sourceType":"module"}