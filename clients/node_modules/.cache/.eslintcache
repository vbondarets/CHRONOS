[{"/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/index.js":"1","/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/App.js":"2","/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/components/AppRoute.js":"3","/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/routes/Route.js":"4","/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/components/pages/PostPage.js":"5","/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/components/pages/LoginPage.js":"6","/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/components/pages/RegisterPage.js":"7","/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/reducers/Reducer.js":"8","/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/reducers/AuthReducer.js":"9","/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/action/AuthAction.js":"10","/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/api/AuthApi.js":"11","/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/components/pages/Navbar.js":"12","/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/components/pages/Homepage.js":"13","/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/reducers/PostReducer.js":"14","/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/action/PostAction.js":"15","/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/api/PostApi.js":"16","/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/components/pages/PostComponents/GetLikes.js":"17","/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/components/pages/PostComponents/GetComment.js":"18","/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/api/CommentsApi.js":"19","/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/components/pages/UserPage.js":"20","/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/reducers/UserReducer.js":"21","/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/action/UserAction.js":"22","/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/api/UserApi.js":"23","/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/reducers/CategoryReducer.js":"24","/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/action/CategoryAction.js":"25","/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/api/CategoryApi.js":"26","/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/components/pages/PostComponents/GetCategory.js":"27","/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/reducers/CommentReducer.js":"28","/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/components/pages/Pagination/Pagination.js":"29","/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/components/pages/AllUsers.js":"30","/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/components/pages/CategoryPageForAdmin.js":"31","/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/components/pages/ResetPassword.js":"32","/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/components/pages/TokenConfirm.js":"33","/home/firemort/Рабочий стол/Fullstack/chronos/idashchenk/clients/src/index.js":"34","/home/firemort/Рабочий стол/Fullstack/chronos/idashchenk/clients/src/App.js":"35","/home/firemort/Рабочий стол/Fullstack/chronos/idashchenk/clients/src/reducers/Reducer.js":"36","/home/firemort/Рабочий стол/Fullstack/chronos/idashchenk/clients/src/components/AppRoute.js":"37","/home/firemort/Рабочий стол/Fullstack/chronos/idashchenk/clients/src/reducers/AuthReducer.js":"38","/home/firemort/Рабочий стол/Fullstack/chronos/idashchenk/clients/src/reducers/UserReducer.js":"39","/home/firemort/Рабочий стол/Fullstack/chronos/idashchenk/clients/src/routes/Route.js":"40","/home/firemort/Рабочий стол/Fullstack/chronos/idashchenk/clients/src/components/pages/ResetPassword.js":"41","/home/firemort/Рабочий стол/Fullstack/chronos/idashchenk/clients/src/components/pages/LoginPage.js":"42","/home/firemort/Рабочий стол/Fullstack/chronos/idashchenk/clients/src/components/pages/TokenConfirm.js":"43","/home/firemort/Рабочий стол/Fullstack/chronos/idashchenk/clients/src/action/AuthAction.js":"44","/home/firemort/Рабочий стол/Fullstack/chronos/idashchenk/clients/src/api/AuthApi.js":"45","/home/firemort/Рабочий стол/Fullstack/chronos/idashchenk/clients/src/components/pages/RegisterPage.js":"46","/home/firemort/Рабочий стол/Fullstack/chronos/idashchenk/clients/src/components/pages/Navbar.js":"47","/home/firemort/Рабочий стол/Fullstack/chronos/idashchenk/clients/src/components/pages/Homepage.js":"48","/home/firemort/Рабочий стол/Fullstack/CHRONOS/clients/src/index.js":"49","/home/firemort/Рабочий стол/Fullstack/CHRONOS/clients/src/App.js":"50","/home/firemort/Рабочий стол/Fullstack/CHRONOS/clients/src/reducers/Reducer.js":"51","/home/firemort/Рабочий стол/Fullstack/CHRONOS/clients/src/components/AppRoute.js":"52","/home/firemort/Рабочий стол/Fullstack/CHRONOS/clients/src/reducers/AuthReducer.js":"53","/home/firemort/Рабочий стол/Fullstack/CHRONOS/clients/src/routes/Route.js":"54","/home/firemort/Рабочий стол/Fullstack/CHRONOS/clients/src/components/pages/Navbar.js":"55","/home/firemort/Рабочий стол/Fullstack/CHRONOS/clients/src/components/pages/Homepage.js":"56","/home/firemort/Рабочий стол/Fullstack/CHRONOS/clients/src/components/pages/TokenConfirm.js":"57","/home/firemort/Рабочий стол/Fullstack/CHRONOS/clients/src/components/pages/RegisterPage.js":"58","/home/firemort/Рабочий стол/Fullstack/CHRONOS/clients/src/components/pages/LoginPage.js":"59","/home/firemort/Рабочий стол/Fullstack/CHRONOS/clients/src/components/pages/ResetPassword.js":"60","/home/firemort/Рабочий стол/Fullstack/CHRONOS/clients/src/action/AuthAction.js":"61","/home/firemort/Рабочий стол/Fullstack/CHRONOS/clients/src/api/AuthApi.js":"62"},{"size":518,"mtime":1665950508098,"results":"63","hashOfConfig":"64"},{"size":703,"mtime":1665950524470,"results":"65","hashOfConfig":"64"},{"size":573,"mtime":1666880537261,"results":"66","hashOfConfig":"64"},{"size":1207,"mtime":1666563125690,"results":"67","hashOfConfig":"64"},{"size":7328,"mtime":1667166829369,"results":"68","hashOfConfig":"64"},{"size":2373,"mtime":1667157548369,"results":"69","hashOfConfig":"64"},{"size":2701,"mtime":1666721048305,"results":"70","hashOfConfig":"64"},{"size":463,"mtime":1666463934943,"results":"71","hashOfConfig":"64"},{"size":542,"mtime":1666562590562,"results":"72","hashOfConfig":"64"},{"size":1860,"mtime":1666563492788,"results":"73","hashOfConfig":"64"},{"size":704,"mtime":1666562811591,"results":"74","hashOfConfig":"64"},{"size":4822,"mtime":1667159662045,"results":"75","hashOfConfig":"64"},{"size":14524,"mtime":1667166467086,"results":"76","hashOfConfig":"64"},{"size":2646,"mtime":1666990679273,"results":"77","hashOfConfig":"64"},{"size":6578,"mtime":1666990507324,"results":"78","hashOfConfig":"64"},{"size":1302,"mtime":1666989895461,"results":"79","hashOfConfig":"64"},{"size":685,"mtime":1667238089014,"results":"80","hashOfConfig":"64"},{"size":4987,"mtime":1667167578114,"results":"81","hashOfConfig":"64"},{"size":526,"mtime":1666463698427,"results":"82","hashOfConfig":"64"},{"size":13354,"mtime":1667160211739,"results":"83","hashOfConfig":"64"},{"size":683,"mtime":1666895557773,"results":"84","hashOfConfig":"64"},{"size":2040,"mtime":1666895982639,"results":"85","hashOfConfig":"64"},{"size":901,"mtime":1666895509377,"results":"86","hashOfConfig":"64"},{"size":454,"mtime":1666544139573,"results":"87","hashOfConfig":"64"},{"size":1053,"mtime":1666986930610,"results":"88","hashOfConfig":"64"},{"size":502,"mtime":1666544257075,"results":"89","hashOfConfig":"64"},{"size":673,"mtime":1667082339802,"results":"90","hashOfConfig":"64"},{"size":262,"mtime":1666782673054,"results":"91","hashOfConfig":"64"},{"size":840,"mtime":1667069879207,"results":"92","hashOfConfig":"64"},{"size":3604,"mtime":1667164085050,"results":"93","hashOfConfig":"64"},{"size":1944,"mtime":1667165079531,"results":"94","hashOfConfig":"64"},{"size":1160,"mtime":1666723408993,"results":"95","hashOfConfig":"64"},{"size":1074,"mtime":1666723992292,"results":"96","hashOfConfig":"64"},{"size":518,"mtime":1667916290928,"results":"97","hashOfConfig":"98"},{"size":703,"mtime":1667916290896,"results":"99","hashOfConfig":"98"},{"size":174,"mtime":1667916966762,"results":"100","hashOfConfig":"98"},{"size":573,"mtime":1667917406213,"results":"101","hashOfConfig":"98"},{"size":542,"mtime":1667916290932,"results":"102","hashOfConfig":"98"},{"size":683,"mtime":1667916290936,"results":"103","hashOfConfig":"98"},{"size":696,"mtime":1667917634582,"results":"104","hashOfConfig":"98"},{"size":1160,"mtime":1667916290916,"results":"105","hashOfConfig":"98"},{"size":2373,"mtime":1667916290908,"results":"106","hashOfConfig":"98"},{"size":1074,"mtime":1667916290916,"results":"107","hashOfConfig":"98"},{"size":1860,"mtime":1667916290896,"results":"108","hashOfConfig":"98"},{"size":704,"mtime":1667916290900,"results":"109","hashOfConfig":"98"},{"size":2701,"mtime":1667917038976,"results":"110","hashOfConfig":"98"},{"size":4781,"mtime":1667917531567,"results":"111","hashOfConfig":"98"},{"size":152,"mtime":1667917340658,"results":"112","hashOfConfig":"98"},{"size":518,"mtime":1667919278265,"results":"113","hashOfConfig":"114"},{"size":703,"mtime":1667919278253,"results":"115","hashOfConfig":"114"},{"size":174,"mtime":1667919278265,"results":"116","hashOfConfig":"114"},{"size":573,"mtime":1667919278253,"results":"117","hashOfConfig":"114"},{"size":542,"mtime":1667919278265,"results":"118","hashOfConfig":"114"},{"size":696,"mtime":1667919278269,"results":"119","hashOfConfig":"114"},{"size":4781,"mtime":1667919278257,"results":"120","hashOfConfig":"114"},{"size":152,"mtime":1667919278257,"results":"121","hashOfConfig":"114"},{"size":1074,"mtime":1667919278257,"results":"122","hashOfConfig":"114"},{"size":2701,"mtime":1667919278257,"results":"123","hashOfConfig":"114"},{"size":2373,"mtime":1667919278257,"results":"124","hashOfConfig":"114"},{"size":1160,"mtime":1667919278257,"results":"125","hashOfConfig":"114"},{"size":1860,"mtime":1667919278253,"results":"126","hashOfConfig":"114"},{"size":704,"mtime":1667919278253,"results":"127","hashOfConfig":"114"},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"132"},"1kg1mih",{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"132"},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"132"},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"144","messages":"145","suppressedMessages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147"},{"filePath":"148","messages":"149","suppressedMessages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151"},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"132"},{"filePath":"156","messages":"157","suppressedMessages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"159","messages":"160","suppressedMessages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"162","messages":"163","suppressedMessages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"132"},{"filePath":"166","messages":"167","suppressedMessages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"169","messages":"170","suppressedMessages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172"},{"filePath":"173","messages":"174","suppressedMessages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176"},{"filePath":"177","messages":"178","suppressedMessages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"180","messages":"181","suppressedMessages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"132"},{"filePath":"184","messages":"185","suppressedMessages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"187","messages":"188","suppressedMessages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"190","messages":"191","suppressedMessages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193"},{"filePath":"194","messages":"195","suppressedMessages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"197","messages":"198","suppressedMessages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200"},{"filePath":"201","messages":"202","suppressedMessages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"204","messages":"205","suppressedMessages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"132"},{"filePath":"208","messages":"209","suppressedMessages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"211","messages":"212","suppressedMessages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"214","messages":"215","suppressedMessages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"217","messages":"218","suppressedMessages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"220","messages":"221","suppressedMessages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"132"},{"filePath":"224","messages":"225","suppressedMessages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"227","messages":"228","suppressedMessages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"132"},{"filePath":"231","messages":"232","suppressedMessages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"234","messages":"235","suppressedMessages":"236","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"237","messages":"238","suppressedMessages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"132"},{"filePath":"241","messages":"242","suppressedMessages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"244","messages":"245","suppressedMessages":"246","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1gejkzv",{"filePath":"247","messages":"248","suppressedMessages":"249","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"250","messages":"251","suppressedMessages":"252","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"253","messages":"254","suppressedMessages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"256","messages":"257","suppressedMessages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"259","messages":"260","suppressedMessages":"261","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"262","messages":"263","suppressedMessages":"264","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"265","messages":"266","suppressedMessages":"267","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"268","messages":"269","suppressedMessages":"270","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"271","messages":"272","suppressedMessages":"273","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"274","messages":"275","suppressedMessages":"276","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"277","messages":"278","suppressedMessages":"279","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"280","messages":"281","suppressedMessages":"282","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"283","messages":"284","suppressedMessages":"285","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"286","messages":"287","suppressedMessages":"288","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"289","messages":"290","suppressedMessages":"291","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"141yzu2",{"filePath":"292","messages":"293","suppressedMessages":"294","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"295","messages":"296","suppressedMessages":"297","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"298","messages":"299","suppressedMessages":"300","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"301","messages":"302","suppressedMessages":"303","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"304","messages":"305","suppressedMessages":"306","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"307","messages":"308","suppressedMessages":"309","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"310","messages":"311","suppressedMessages":"312","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"313","messages":"314","suppressedMessages":"315","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"316","messages":"317","suppressedMessages":"318","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"319","messages":"320","suppressedMessages":"321","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"322","messages":"323","suppressedMessages":"324","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"325","messages":"326","suppressedMessages":"327","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"328","messages":"329","suppressedMessages":"330","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/index.js",["331"],[],"import React, { createContext } from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport { Provider } from \"react-redux\";\nimport { createStore,applyMiddleware,compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport reducers from './reducers/Reducer'\n\n\nconst store = createStore(reducers, compose(applyMiddleware(thunk)))\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n    \n    <Provider store={store}> \n        <App />\n    </Provider>\n  \n  \n);\n\n",[],"/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/App.js",["332","333","334"],[],"import React from \"react\";\nimport {BrowserRouter} from \"react-router-dom\" \nimport AppRoute from \"./components/AppRoute\";\nimport { useHistory } from \"react-router-dom\";\nimport \"./components/style/pagestyle.css\"\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Cookies from \"js-cookie\";\nimport jwt_decode from 'jwt-decode'\n\nconst App = () =>{\n  const dispatch = useDispatch()\n  const store = useSelector(store => store)\n  const token = Cookies.get('token')\n  \n  if (token === undefined) {\n    store.Auth.token = ''\n  }\n  else {\n    store.Auth.token = token\n  }\n  const history = useHistory()\n  return (\n    <BrowserRouter>\n      <AppRoute />\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/components/AppRoute.js",["335"],[],"import React from \"react\";\nimport {route} from \"../routes/Route\";\nimport {Switch, Route, Redirect} from 'react-router-dom'\nimport { useHistory } from \"react-router-dom\";\nimport Navbar from \"./pages/Navbar\";\n\nconst AppRoute= () => {\n    const history = useHistory()\n    return (\n        <>\n        <Navbar />\n        <Switch>\n            {route.map((route)=> \n                <Route key={route.path} component={route.component} path={route.path} exact/>\n            )}\n            <Redirect to='/' />\n        </Switch>\n        </>\n        \n    );\n\n}\n\nexport default AppRoute","/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/routes/Route.js",[],[],"/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/components/pages/PostPage.js",["336","337","338","339"],[],"import React, {useEffect, useState} from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { createComment, deleteLikeFromPost, GetLikes, getPostById, likePost, UpdatePost } from \"../../action/PostAction\";\nimport moment from 'moment'\nimport style from \"../style/PostPage.module.css\"\nimport GetLike from \"./PostComponents/GetLikes\";\nimport CommentsForPost from \"./PostComponents/GetComment\";\nimport Category from \"./PostComponents/GetCategory\";\nimport jwt_decode from 'jwt-decode'\nimport { Button } from \"@mui/material\";\nimport ThumbUpIcon from '@mui/icons-material/ThumbUp';\nimport EditIcon from '@mui/icons-material/Edit';\nimport AddIcon from '@mui/icons-material/Add';\n\nconst PostPage = () => {\n    const [comment, setComment] = useState('')\n    let [info, setInfo] = useState('')\n    let [title, setTitle] = useState('')\n    const [check, setCheck] = useState(false)\n    let [index, setIndex] = useState(0)\n    const {id} = useParams()\n    let post, likes, comments, categories\n\n    const history = useHistory()\n    const dispatch = useDispatch()\n    const data = useSelector(state => state.Post)\n    const auth = useSelector(state => state.Auth)\n    const categorySelector = useSelector(state => state.Category)\n\n    const token = auth.token\n    const decode = jwt_decode(token)\n    const decoded_id = decode.id\n\n    useEffect ( () => {\n        dispatch(getPostById(id))\n    }, [dispatch])\n    post = data.post\n    likes = data.likes\n    comments = data.comments\n    categories = categorySelector.categories\n    \n    const like = () => {\n        if (check === false) {\n            setCheck(true)\n            dispatch(likePost(id,post[0].user_id))\n        }\n        else if (check === true) {\n            setCheck(false)\n            dispatch(deleteLikeFromPost(id))\n        }\n    }\n    const create = (e) => {\n        e.preventDefault()\n        dispatch(createComment(id, comment))\n    }\n    if (categories === undefined) {\n        categories = []\n    }\n    if (comments === undefined) {\n        comments = []\n    }\n    if (likes === undefined) {\n        likes = []\n    }\n    if (post === undefined) {\n        post = []\n    }\n    else {\n        return (\n            <>\n                {post[0].user_id === decoded_id ? \n                    <div className={style.mainDiv}>\n                            <div className ={style.divPost} key={post[0].id}>\n                                <a className={style.loginHome} onClick = {() => {history.push(`/user/${post[0].user_id}`)}}>Author: {post[0].login}</a>\n                                <Button style={{marginLeft:\"32%\"}} endIcon={<EditIcon />} \n                                    onClick={() => {\n                                        if (index === 0) {\n                                            setIndex(1)\n                                        }\n                                        if (index === 1) {\n                                            setIndex(0)\n                                            dispatch(UpdatePost(post[0].id, info, title, categories[0].title))\n                                        }\n                                    }}    \n                                >Edit</Button>\n                                <p className={style.titlePost}>Title: {index===1 ? \n                                        <input type='text' name = 'title' \n                                               placeholder=\"Enter new title\" required = {true}\n                                               value = {title} onChange = { e => setTitle(e.target.value)}> \n                                        </input> \n                                        :\n                                        post[0].title}</p>\n                                <Category post_id = {id} />\n                                <p className={style.contentPost}>Content: {index === 1 ?  \n                                    <textarea type='text' name = 'info' \n                                    placeholder=\"Enter new content\" required = {true}\n                                    value = {info} onChange = { e => setInfo(e.target.value)}> \n                                    </textarea >\n                                    :\n                                    post[0].info}</p>\n                                <GetLike id = {id} likes = {likes}/><Button variant=\"outlined\" onClick={like} startIcon={<ThumbUpIcon />}>Like</Button>\n                                <p className={style.timePost}>{moment(post[0].time).fromNow()}</p>\n                            </div>\n                            <div className={style.divComments}>\n                                <p className={style.headerComments}>Comments:</p>\n                                <CommentsForPost post_id = {post[0].id} comments ={comments}/>\n                                <textarea\n                                    className={style.Commentinput}\n                                    name=\"comment\" type='text' \n                                    placeholder=\"Leave comment if you want\" \n                                    maxLength={255} \n                                    value={comment} onChange = {e => setComment(e.target.value)}>\n                                </textarea>\n                                <Button onClick={create} endIcon={<AddIcon />} sx={{marginTop:\"1%\"}} variant=\"outlined\" className={style.CommentCreateButton}>Comment</Button>\n                            </div>\n                    </div>    \n                    :\n                    <div className={style.mainDiv}>\n                            <div className ={style.divPost} key={post[0].id}>\n                                <a className={style.loginHome} onClick = {() => {history.push(`/user/${post[0].user_id}`)}}>Author: {post[0].login}</a>\n                                <p className={style.titlePost}>Title: {post[0].title}</p>\n                                <Category post_id = {id} />\n                                <p className={style.contentPost}>Content: {post[0].info}</p>\n                                <GetLike id = {id} likes = {likes}/><Button variant=\"outlined\" onClick={like} startIcon={<ThumbUpIcon />}>Like</Button>\n                                <p className={style.timePost}>{moment(post[0].time).fromNow()}</p>\n                            </div>\n                            <div className={style.divComments}>\n                                <p className={style.headerComments}>Comments:</p>\n                                <CommentsForPost post_id = {post[0].id} comments ={comments}/>\n                                <textarea\n                                    className={style.Commentinput}\n                                    name=\"comment\" type='text' \n                                    placeholder=\"Leave comment if you want\" \n                                    maxLength={255} \n                                    value={comment} onChange = {e => setComment(e.target.value)}>\n                                </textarea>\n                                <Button onClick={create} variant='outlined' className={style.CommentCreateButton}>Comment</Button>\n                            </div>\n                    </div>\n                }\n                \n            </>\n        );   \n    }\n}\n\nexport default PostPage;","/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/components/pages/LoginPage.js",["340","341","342"],[],"import React, { useContext } from \"react\";\nimport { useState } from \"react\";\nimport { loginUser } from \"../../action/AuthAction\";\nimport { useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport style from '../style/UserForm/LoginStyle.module.css'\nimport LoginIcon from '@mui/icons-material/Login';\n\nconst LoginPage = () => {\n    const [login,setLogin] = useState('')\n    const [password,setPassword] = useState('')\n    const [email,setEmail] = useState('')\n    const dispatch = useDispatch()\n    const history = useHistory()\n    const submit = e => {\n        e.preventDefault()\n        dispatch(loginUser(login,password,email))\n        history.push('/')\n    }\n    return (\n        <div className={style.LoginDiv}>\n            <div className={style.LoginForm}>\n                <h1>\n                    Login    \n                </h1>\n                <div>\n                    <p>Email: \n                    <input type=\"email\" name=\"email\" placeholder=\"Please paste your email\"\n                        maxLength={20} required={true} \n                        value = {email} onChange= {e=>setEmail(e.target.value)}\n                    />\n                    </p>\n                    <p>Login: \n                    <input type=\"text\" name=\"login\" placeholder=\"Please paste your login\"\n                        maxLength={20} required={true} value={login} \n                        onChange = {e=>setLogin(e.target.value)}\n                    />\n                    </p>\n                    <p>Password: \n                    <input type=\"password\" name=\"password\" placeholder=\"Please paste your password\"\n                        minLength={8} required={true} \n                        value = {password} onChange= {e => setPassword(e.target.value)}\n                    /> \n                    </p>\n                    <div className={style.divSubmit}>\n                        <a className={style.linkLogin} onClick={()=>{history.push(`/register`)}}>Haven't account?</a>\n                        <a onClick={()=>{history.push('/reset-password')}} className={style.linkLogin1}>Forget your password?</a>\n                        <button onClick={submit} className={style.buttonLogin}>Login<LoginIcon /></button>\n                    </div>\n                    \n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default LoginPage;","/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/components/pages/RegisterPage.js",["343"],[],"import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { register } from \"../../action/AuthAction\";\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport style from '../style/UserForm/RegisterStyle.module.css'\n\nconst RegisterPage = () => {\n    const history = useHistory()\n    const dispatch = useDispatch()\n    const [login, setLogin] = useState(\"\")\n    const [email, setEmail] = useState(\"\")\n    const [full_name, setFull_name] = useState(\"\")\n    const [password, setPassword] = useState(\"\")\n    const submit = e => {\n        e.preventDefault()\n        dispatch(register(login,full_name, email,password))\n        history.push('/login')\n    }\n    return (\n        <div className={style.RegisterDiv}>\n            <div className={style.RegisterForm}>\n                <h1 className={style.h1Register}>\n                    Registration       \n                </h1>\n                <div>\n                    <p>Login: \n                    <input type=\"text\" name=\"login\" placeholder=\"Please paste your login\"\n                        maxLength={20} autoFocus required={true} value={login} \n                        onChange = {e=>setLogin(e.target.value)}\n                        \n                    />\n                    </p>\n                    <p>E-mail: \n                    <input type=\"email\" name=\"email\" placeholder=\"Please paste your email\"\n                        maxLength={20} autoFocus required={true} \n                        value = {email} onChange= {e=>setEmail(e.target.value)}\n                    />\n                    </p>\n                    <p>Full Name: \n                    <input type=\"text\" name=\"full_name\" placeholder=\"Please paste your Full name\"\n                        maxLength={20} autoFocus required={true} \n                        value = {full_name} onChange= {e => setFull_name(e.target.value)}\n                    />\n                    </p>\n                    <p>Password: \n                    <input type=\"password\" name=\"password\" placeholder=\"Please paste your password\"\n                        minLength={8} autoFocus required={true} \n                        value = {password} onChange= {e => setPassword(e.target.value)}\n                    /> \n                    </p>\n                    <div className={style.divSubmit}>\n                        <a onClick={()=>{history.push(`/login`)}} className={style.linkRegister}>Already have an account?</a>\n                        <button onClick={submit} className={style.buttonRegister}>Register</button>\n                    </div>\n                    \n                </div>\n            </div>\n        </div>\n        \n    );\n}\n\nexport default RegisterPage;","/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/reducers/Reducer.js",[],[],"/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/reducers/AuthReducer.js",[],[],"/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/action/AuthAction.js",["344"],[],"import { getUser, registerUser, resetPass, resetToken } from '../api/AuthApi'\nimport {loginn} from '../api/AuthApi'\nimport Cookie from \"js-cookie\"\nimport { useHistory } from 'react-router-dom'\nexport const register = (login,full_name, email,password) => async(dispatch) => {\n    try {\n        const {data} = await registerUser(login,full_name, email,password)\n        console.log(data);\n        dispatch({type:'register', payload: data})   \n    } catch (error) {\n        console.log(error);\n    } \n}\n\nexport const loginUser = (login,password,email) => async (dispatch) => {\n    try {\n        if (!login || !password || !email) {alert(\"Fill all required fields\")}\n        const {data} = await loginn(email,login,password)\n        Cookie.set('token', data.token,{expires:7})\n        dispatch({type:'login', payload:data.token})\n    } catch (e) {\n        alert(\"Check login, email or password\")\n    }\n}\n\nexport const tokenConfirm = (token, password) => async(dispatch) => {\n    try {\n        const {data} = await resetToken(token, password)\n        console.log(data);\n        if (data.message === 'Your password was changed') {\n            alert('Your password was changed')\n            \n            return dispatch ({type:'tokenconfirm', payload:'Ok'})\n        }\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const Reset_Password = (email) => async(dispatch) => {\n    try {\n        const {data} = await resetPass(email)\n        if (data.message === 'Email was sent') {\n            return dispatch({type: 'resetpassword', payload:data.message})\n        }\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const getUser_by_id = (id) => async (dispatch) => {\n    try {\n        const {data} = await getUser(id)\n        dispatch({type:'getuser_by_id', payload:data.result})\n    } catch (error) {\n        console.log(error);\n    }\n}","/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/api/AuthApi.js",[],[],"/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/components/pages/Navbar.js",["345","346","347","348","349","350","351","352","353","354","355","356"],[],"import React, { useEffect, useState } from \"react\";\nimport Cookies from 'js-cookie'\nimport style from \"../style/Navbar.module.css\"\nimport {observer} from 'mobx-react-lite'\nimport { useHistory } from \"react-router-dom\";\nimport jwt_decode from 'jwt-decode'\nimport { useSelector } from \"react-redux\";\nimport HomeIcon from '@mui/icons-material/Home';\nimport { Button } from \"@mui/material\";\nimport LogoutIcon from '@mui/icons-material/Logout';\n\nconst Navbar= () => {\n    const history = useHistory()\n    const [isAuth, setAuth] = useState()\n    const auth = useSelector(state=>state.Auth)\n    const tokenn = auth.token\n    let decode, user_id, role\n    if (tokenn === '') {\n        \n    }\n    else {\n        decode = jwt_decode(tokenn)\n        user_id = decode.id\n        role = decode.role\n    }\n    const token = Cookies.get('token')   \n \n    useEffect ( () => {\n        if (token) {\n            setAuth(true)\n        }\n        else {\n            setAuth(false)\n        }      \n    }, [token])\n    // if (token) {\n    //     isAuth = true\n    // }\n    // else {\n    //     isAuth = false\n    // }\n    return (\n        isAuth ? \n        <>\n            {role === 'admin' ? \n                <>\n                    <h1 className={style.h1Navbar}>INSPACE<img src=\"http://localhost:3001/avatar/logo.png\" className ={style.Logo} alt=\"logo\"></img></h1>\n                    <div >\n                        <ul className={style.ulNavbar}> \n                            <li className={style.liNavbar}><a className={style.aNavbar} onClick={()=>{history.push(\"/home\")}}>Home<HomeIcon /></a></li>\n                            <li className={style.liNavbar}><a className={style.aNavbar} onClick={()=>{history.push(\"/users\")}}>Users</a></li>\n                            <li className={style.liNavbar}><a className={style.aNavbar} onClick={()=>{history.push(\"/categories\")}}>Categories</a></li>\n                            <li className={style.liNavbarAdmin}><a className={style.aNavbar} onClick={() => {\n                                                    history.push(`/user/${user_id}`)}}>{decode.login\n                                                         }</a>\n                            </li>\n                            <li className={style.liNavbar}><Button onClick={()=>{Cookies.remove('token')\n                                                                                setAuth(false)}}>Logout <LogoutIcon/></Button></li>\n\n                        </ul>\n                        \n                    </div>\n                </>\n                :\n                <>\n                    <h1 className={style.h1Navbar}>INSPACE<img src=\"http://localhost:3001/avatar/logo.png\" className ={style.Logo} alt=\"logo\"></img></h1>\n                    <div >\n                        <ul className={style.ulNavbar}> \n                            <li className={style.liNavbar}><a className={style.aNavbar} onClick={()=>{history.push(\"/home\")}}>Home<HomeIcon /></a></li>\n                            <li className={style.liNavbar}><a className={style.aNavbar} onClick={()=>{history.push(\"/users\")}}>Users</a></li>\n                            <li className={style.liNavbarUser}><a className={style.aNavbar} onClick={() => {\n                                                                    history.push(`/user/${user_id}`)\n                                                                }}>\n                                                                {decode.login}\n                                                          </a>\n                            </li>\n                            <li className={style.liNavbar}><Button onClick={()=>{Cookies.remove('token')\n                                                                                setAuth(false)}}>Logout <LogoutIcon/></Button></li>\n\n                        </ul>\n                        \n                    </div>\n                </>\n            }   \n        </>\n        :\n        <>\n            <h1 className={style.h1Navbar}>INSPACE<img src=\"http://localhost:3001/avatar/logo.png\" className ={style.Logo} alt=\"logo\"></img></h1>\n            <div>\n                <ul className={style.ulNavbar}>\n                    <li className={style.liNavbar}><a className={style.aNavbar} onClick={()=>{history.push(\"/home\")}}>Home <HomeIcon /></a></li>\n                    <li className={style.liNavbar}><a className={style.aNavbar} onClick={()=>{history.push(\"/register\")}}>Users</a></li>\n                    <li className={style.liNavbarRegister}><a className={style.aNavbar} onClick={()=>{history.push(\"/register\")}}>Register</a></li>\n                    <li className={style.liNavbar}><a className={style.aNavbar} onClick={()=>{history.push(\"/login\")}}>Login</a></li>\n                </ul>\n            </div>\n                \n        </>\n        \n    );\n}\n\n\nexport default Navbar;","/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/components/pages/Homepage.js",["357","358","359","360"],[],"import React, {useEffect, useState} from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { createPost, deletePost, getPosts, getPostsByCategory } from \"../../action/PostAction\";\nimport style from \"../style/Homepage.module.css\"\nimport moment from 'moment'\nimport { getCategories } from \"../../action/CategoryAction\";\nimport Pagination from \"./Pagination/Pagination\";\nimport jwt_decode from 'jwt-decode'\nimport DeleteIcon from '@mui/icons-material/Delete'\nimport {Button} from '@mui/material'\n\nconst urls = [\n    'https://images.unsplash.com/photo-1549631998-6d554b1402ae?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2128&q=80',\n    'https://images.unsplash.com/photo-1451187580459-43490279c0fa?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1172&q=80',\n    'https://images.unsplash.com/photo-1614732414444-096e5f1122d5?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1074&q=80',\n    'https://images.unsplash.com/photo-1630839437035-dac17da580d0?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1615&q=80',\n    'https://images.unsplash.com/photo-1630694093867-4b947d812bf0?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1615&q=80'\n]\n\nconst HomePage = () => {\n    //all required paramets\n    let posts, role, decode\n    const history = useHistory()\n    let [category, setCategory] = useState('')\n    let [title, setTitle] = useState('')\n    let [content, setContent] = useState('')\n    let [currentPage, setCurrentPage] = useState(1)\n    let [postPerPage] = useState(5)\n    const dispatch = useDispatch()\n\n    //get info from global store\n    const data = useSelector(state => state.Post)\n    const auth = useSelector(store => store.Auth)\n    const categorySelector = useSelector(store => store.Category)\n\n    //take token\n    const token = auth.token\n    if (token != '') {\n        decode = jwt_decode(token)\n        role = decode.role\n    }\n    const indexOfLastPost = currentPage * postPerPage\n    const indexOfFirstPost = indexOfLastPost - postPerPage\n    //dispatch All information\n    const pagination = (pageNumber) => {setCurrentPage(pageNumber)}\n    useEffect(() => {\n        dispatch(getPosts())\n        dispatch(getCategories())\n    },[dispatch])\n    let truepost = []\n    let categorie = categorySelector.categories\n    posts = data.allPost\n    console.log(posts);\n    if (posts === undefined) {\n        posts = []\n    }\n    if (categorie.length === 0) {\n        categorie = []\n    }\n    else {\n        for (let index = 0; index < posts.length; index++) {\n            if (posts[index].user_id != null) {\n                truepost.push(posts[index])\n            }\n            \n        }\n        const currentPosts = truepost.slice(indexOfFirstPost, indexOfLastPost)\n        return (\n            <>\n                {token === '' ? \n                    //if not sign in\n                    <div className={style.DivPosts}>\n                    {currentPosts.map((pst) => \n                        <div className ={style.divPost} style={{backgroundImage:`url(${urls[0]})`}} key={pst.id}>\n                            <a className={style.loginHome} onClick = {() => {history.push(`/register`)}}>{pst.login}</a>\n                            <div className={style.divHref} onClick={()=>{history.push(`register`)}}>\n                                <p className={style.titlePost}>Title: {pst.title}</p>\n                                <p className={style.contentPost}>Content: {pst.info.substring(0,15).concat('...')}</p>\n                                <p className={style.timePost}>{moment(pst.time).fromNow()}</p>\n                            </div>\n                        </div>\n                    )}\n                    </div>\n                    :\n                    //if sign in\n                    <>\n                        {role === 'admin' ? \n                                <>\n                                <div className={style.divAllPosts}>\n                                    <div className={style.SideBarDiv}>\n                                        <div onChange={ e => dispatch({type:e.target.value, payload:posts})}>\n                                            <p>Sort:</p>\n                                            <input value={'getposts'} type='radio' name= 'sort' id='default'></input>\n                                            <label htmlFor='default'>The newest</label>\n                                            <br></br>\n                                            <input value={'sortbyauthor'} type='radio' name ='sort' id='author'></input>\n                                            <label htmlFor='author'>By author</label>\n                                            <br></br>\n                                            <input value={'sortbyold'} type='radio' name ='sort' id='old'></input>\n                                            <label htmlFor='old'>The oldest</label>\n                                            <br></br>\n                                        </div>\n                                        <div onChange={ e => dispatch(getPostsByCategory(e.target.value))} >\n                                            <p>Choose category:</p>\n                                            <input type ='radio' name = 'category' id = 'all' value = 'all' />\n                                            <label htmlFor='all'>All posts</label>\n                                            {categorie.map( (category) =>\n                                                <div key={category.id}>\n                                                    <input type ='radio' name = 'category' id = {category.id} value = {category.id} />\n                                                    <label htmlFor={category.id}>{category.title}</label>\n                                                </div>\n                                            )}\n                                        </div>\n                                    </div>\n                                    <div className={style.DivPosts}>\n                                        {currentPosts.map((pst) => \n                                            <div className ={style.divPost} key={pst.id} style={{backgroundImage:`url(${urls[0]})`}}>\n                                                <a className={style.loginHome} onClick = {() => {history.push(`/user/${pst.user_id}`)}}>{pst.login}</a>\n                                                <div className={style.divHref} onClick={()=>{history.push(`/post/${pst.id}`)}}>\n                                                    <p className={style.titlePost}>Title: {pst.title}</p>\n                                                    <p className={style.contentPost}>Content: {pst.info.substring(0,15)}</p>\n                                                    <p className={style.timePost}>{moment(pst.time).fromNow()}</p>\n                                                </div>\n                                                <Button variant=\"outlined\" className={style.ButtonDelete} startIcon={<DeleteIcon />} onClick={ () => {dispatch(deletePost(pst.id))}}>Delete</Button>\n                                            </div>\n                                        )}\n                                    </div>\n                                    <div className={style.NewPostDiv}>\n                                        <h1>Create new post</h1>\n                                        <select onChange={ e => setCategory(e.target.value)}>\n                                            <option value=''>Select category of post</option>\n                                            {categorie.map( (categor) => \n                                                <option value={categor.title} key={categor.id}>{categor.title}</option>\n                                            )}\n                                        </select>\n                                        <p>Title: \n                                            <input type='text' name=\"title\" \n                                            placeholder=\"Enter title of your post\"\n                                            value={title} onChange={e => setTitle(e.target.value)}\n                                            >    \n                                            </input>\n                                        </p>\n                                        <p>Content: \n                                            <textarea type='text' name=\"content\" \n                                            placeholder=\"Enter description on your post\" \n                                            maxLength='255' size={255}\n                                            value={content} onChange={e => setContent(e.target.value)} />\n                                        </p>\n                                        <button onClick={ () => {dispatch(createPost(title, content, category))}}>Create post</button>\n                                    </div>\n                                </div>\n                                <Pagination paginate={pagination} postPerPage={postPerPage} totalPost ={posts.length}/>\n                                </>\n                            :\n                            <>\n                                <div className={style.divAllPosts}>\n                                    <div className={style.SideBarDiv}>\n                                        <div onChange={ e => dispatch({type:e.target.value, payload:posts})}>\n                                            <p>Sort:</p>\n                                            <input value={'getposts'} type='radio' name= 'sort' id='default'></input>\n                                            <label htmlFor='default'>The newest</label>\n                                            <br></br>\n                                            <input value={'sortbyauthor'} type='radio' name ='sort' id='author'></input>\n                                            <label htmlFor='author'>By author</label>\n                                            <br></br>\n                                            <input value={'sortbyold'} type='radio' name ='sort' id='old'></input>\n                                            <label htmlFor='old'>The oldest</label>\n                                        </div>\n                                        <div onChange={ e => dispatch(getPostsByCategory(e.target.value))} >\n                                            <p>Choose category:</p>\n                                            <input type ='radio' name = 'category' id = 'all' value = 'all' />\n                                            <label htmlFor='all'>All posts</label>\n                                            {categorie.map( (category) =>\n                                                <div key={category.id}>\n                                                    <input type ='radio' name = 'category' id = {category.id} value = {category.id} />\n                                                    <label htmlFor={category.id}>{category.title}</label>\n                                                </div>\n                                            )}\n                                        </div>\n                                    </div>\n                                    <div className={style.DivPosts}>\n                                        {currentPosts.map((pst) => \n                                            <div className ={style.divPost} style={{backgroundImage:`url(${urls[0]})`}} key={pst.id}>\n                                                <a className={style.loginHome} onClick = {() => {history.push(`/user/${pst.user_id}`)}}>{pst.login}</a>\n                                                <div className={style.divHref} onClick={()=>{history.push(`/post/${pst.id}`)}}>\n                                                    <p className={style.titlePost}>Title: {pst.title}</p>\n                                                    <p className={style.contentPost}>Content: {pst.info.substring(0,15).concat('...')}</p>\n                                                    <p className={style.timePost}>{moment(pst.time).fromNow()}</p>\n                                                </div>\n                                            </div>\n                                        )}\n                                    </div>\n                                    <div className={style.NewPostDiv}>\n                                        <h1>Create new post</h1>\n                                        <select onChange={ e => setCategory(e.target.value)}>\n                                            <option value=''>Select category of post</option>\n                                            {categorie.map( (categor) => \n                                                <option value={categor.title} key={categor.id}>{categor.title}</option>\n                                            )}\n                                        </select>\n                                        <p>Title: \n                                            <input type='text' name=\"title\" \n                                            placeholder=\"Enter title of your post\"\n                                            value={title} onChange={e => setTitle(e.target.value)}\n                                            >    \n                                            </input>\n                                        </p>\n                                        <p>Content: \n                                            <textarea type='text' name=\"content\" \n                                            placeholder=\"Enter description on your post\" \n                                            maxLength='255' size={255}\n                                            value={content} onChange={e => setContent(e.target.value)} />\n                                        </p>\n                                        <button onClick={ () => {dispatch(createPost(title, content, category))}}>Create post</button>\n                                    </div>\n                                </div>\n                                <Pagination paginate={pagination} postPerPage={postPerPage} totalPost ={posts.length}/>\n                            </>\n                        }\n                    </>\n                }\n            </>\n        )\n    }\n    \n}\n\nexport default HomePage","/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/reducers/PostReducer.js",[],[],"/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/action/PostAction.js",["361","362"],[],"import { deleteComment, likescom, PatchComment } from \"../api/CommentsApi\";\nimport { createCommentsOnPost, createlike, CreatePost, deletelike, GetCategory, getCommentsOnPost, getLikesFromPost, getPost, getPostsbyC, PostByid, PostDelete, updateP } from \"../api/PostApi\"\n\n\nexport const getPosts = () => async(dispatch) => {\n    try {\n        const {data}= await getPost()\n        return dispatch({type:'getposts', payload:data})\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const getPostsByCategory = (id) => async(dispatch) => {\n    try {\n        if (id === 'all') {\n            const Data = await getPost()\n            return dispatch({type:'getPostsbyCategory', payload: Data.data})\n        }\n        else {\n            const {data} = await getPostsbyC(id)\n            if (data.result) {\n                const Data = await getPost()\n                let allPost = []\n                for (let index = 0; index < Data.data.length; index++) {\n                    for (let i = 0; i < data.result.length; i++) {\n                        if (Data.data[index].id === data.result[i].post_id) {\n                            allPost.push(Data.data[index])\n                        }       \n                    }\n                }\n                return dispatch({type:'getPostsbyCategory', payload: allPost})\n            }\n        }\n    } catch (error) {\n        dispatch({type:'getPostsbyCategory', payload: []})\n        console.log(error);\n    }\n}\n\nexport const GetLikes = (id) => async(dispatch) => {\n    try {\n        const {data} = await getLikesFromPost(id)\n        return dispatch({type:'getlikes', payload:data.result})\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const getPostById = (id) => async(dispatch) => {\n    try {\n        const {data} = await PostByid(id)\n        console.log(data);\n        return dispatch({type:\"getpostbyid\", payload:data.result})\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const getLikesFromComment = (id) => async(dispatch) => {\n    try {\n        const {data} = await likescom(id)\n        return dispatch({type:'getlikes', payload:data.result})\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const getComments = (id) => async(dispatch) => {\n    try {\n        const {data} = await getCommentsOnPost(id)\n        return dispatch({type:'getCommentsOnPost', payload:data.result})\n    } catch (error) {\n        return dispatch({type:'getCommentsOnPost', payload:[]})\n        console.log(error);\n    }\n}\n\nexport const getCategory = (id) => async(dispatch) => {\n    try {\n        const {data} = await GetCategory(id)\n        return dispatch({type: 'getCategory', payload:data.result})\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const createComment = (id, comment) => async(dispatch) => {\n    try {\n        const {data} = await createCommentsOnPost(id,comment)\n        console.log(data);\n        \n        if (data.result.affectedRows > 0) {\n            const Data = await getCommentsOnPost(id)\n            if (Data.data.length === 0) {\n                return dispatch({type:'createcommentforpost', payload:[]})\n            }\n            return dispatch({type:'createcommentforpost', payload:Data.data.result})\n        }\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const createPost = (title,info,category) => async(dispatch) => {\n    try {\n        const {data} = await CreatePost(title,info,category)\n        const Data = await getPost()\n        console.log(Data);\n        return dispatch({type:'createpost', payload:Data.data})\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const likePost = (id,direction_id) => async(dispatch) => {\n    try {\n        const {data} = await createlike(id,direction_id)\n        if (data.result.affectedRows > 0) {\n            const Data = await getLikesFromPost(id)\n            dispatch({type:\"likepost\", payload:Data.data.result})\n        }\n    } catch (error) {\n        alert('You already paste like')\n    }\n}\n\nexport const DeletComment = (id,post_id) => async(dispatch) => {\n    try {\n        const Data = await getCommentsOnPost(post_id)\n        if (Data.data.result.length === 1) {\n            const {data} = await deleteComment(id)\n            if (data.result.affectedRows > 0) {\n                return dispatch({type:'deletecomment',payload:[]})\n            }   \n        }\n        else {\n            const {data} = await deleteComment(id)\n            if (data.result.affectedRows > 0) {\n                const Comment = await getCommentsOnPost(post_id)\n                return dispatch({type:'deletecomment',payload:Comment.data.result})\n            }   \n        }\n    \n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const deletePost = (id) => async(dispatch) => {\n    try {\n        const {data} = await PostDelete(id) \n        if (data.message.affectedRows > 0) {\n            const Data = await getPost()\n            const allPost = Data.data\n            let i\n            for (let index = 0; index < allPost.length; index++) {\n                if (allPost[index].id === id) {\n                    i = index\n                }\n            }\n            if (i > -1) {\n                allPost.splice(i,1)\n            }\n            console.log(allPost);\n            return dispatch({type:'deletepost', payload:allPost})\n        }\n    } catch (error) {\n        \n    }\n}\n\nexport const UpdatePost = (post_id, info, title, category) => async(dispatch) => {\n    try {\n        const {data} = await updateP(post_id, info, title, category)\n        console.log(data);\n        if (data.message === 'You update your post') {\n            const Data = await PostByid(post_id)\n            return dispatch({type:'updatepost', payload:Data.data.result})\n        }\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const UpdateComment = (id,post_id,content) => async(dispatch) => {\n    try {\n        const {data} = await PatchComment(id,content)\n        if (data.result.affectedRows > 0) {\n            const Data = await getCommentsOnPost(post_id)\n            return dispatch({type:'updatecomment', payload:Data.data.result})\n        }\n    } catch (error) {\n        alert(\"It`s not your comment\")\n    }\n}\n\nexport const deleteLikeFromPost = (id) => async(dispatch) => {\n    try {\n        const {data} = await deletelike(id)\n        if (data.result.affectedRows>0) {\n            const Data = await getLikesFromPost(id)            \n            dispatch({type:'deletelike', payload:Data.data.result})\n        }\n    } catch (error) {\n        console.log(error);\n    }\n}","/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/api/PostApi.js",[],[],"/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/components/pages/PostComponents/GetLikes.js",["363","364"],[],"/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/components/pages/PostComponents/GetComment.js",["365","366"],[],"import { Button } from \"@mui/material\";\nimport jwt_decode from \"jwt-decode\";\nimport moment from \"moment\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { DeletComment, getComments, UpdateComment } from \"../../../action/PostAction\";\nimport EditIcon from '@mui/icons-material/Edit';\nimport DeleteIcon from '@mui/icons-material/Delete'\n\nimport style from '../../style/PostPage.module.css'\n\nconst CommentsForPost = (props) => {\n    const history = useHistory()\n    let [comment, setComment] = useState('')\n    let [index, setIndex] = useState(0)\n    \n    const auth = useSelector(state=>state.Auth)\n    const token = auth.token\n    const decode = jwt_decode(token)\n    const user_id = decode.id\n    const role = decode.role\n    const {post_id,comments} = props\n    let true_comments = []\n    const dispatch = useDispatch()\n    useEffect ( () => {\n        dispatch(getComments(post_id))\n    }, [dispatch,post_id])\n    if (comments.length === 0) {\n        return (\n            <p>No Comments yet</p>\n        )\n    }\n    else {\n        for (let index = 0; index < comments.length; index++) {\n            if (comments[index].login != null) {\n                true_comments.push(comments[index])\n            }\n        }\n        return (\n            <>\n            {role === 'admin' ? \n                <>\n                    {true_comments.map( (cmnt) => \n                        <div key={cmnt.id} className={style.Comment}>\n                            <a className={style.Commentlogin} onClick = {() => {history.push(`/user/${cmnt.user_id}`)}}>{cmnt.login}</a>\n                            <p className={style.Commentcontent}>{cmnt.content}</p>\n                            {user_id === cmnt.user_id ?\n                            <>\n                            <Button variant=\"outlined\" endIcon={<EditIcon />} className={style.EditButtonComment} onClick= { () => {\n                                if (index === 0) {\n                                    setIndex(1)\n                                }\n                                else if (index === 1) {\n                                    setIndex(0)\n                                    dispatch(UpdateComment(cmnt.id,post_id, comment))\n                                }\n                                console.log(index);\n                            }}>Edit</Button>\n                            {index === 1 ? <textarea type='text' placeholder=\"How u wanna edit comment\" value={comment} onChange={e=>setComment(e.target.value)}/> : <></>}\n                            </>\n                            :\n                            <></>\n                        }\n                            <Button variant=\"outlined\" sx={{float:\"right\", marginRight:\"5%\"}} endIcon={<DeleteIcon/>} onClick={() => {\n                                dispatch(DeletComment(cmnt.id,post_id))\n                            }}>Delete</Button>\n                            <p className={style.Commenttime}>{moment(cmnt.time).fromNow()}</p>\n                        </div>\n                    )}\n                </>\n                :\n                <>\n                    {true_comments.map( (cmnt) => \n                    <div key={cmnt.id} className={style.Comment}>\n                        <a className={style.Commentlogin} onClick = {() => {history.push(`/user/${cmnt.user_id}`)}}>{cmnt.login}</a>\n                        <p className={style.Commentcontent}>{cmnt.content}</p>\n                        {user_id === cmnt.user_id ?\n                            <>\n                            <Button variant=\"outlined\" endIcon={<EditIcon />} className={style.EditButtonComment} onClick= { () => {\n                                if (index === 0) {\n                                    setIndex(1)\n                                }\n                                else if (index === 1) {\n                                    setIndex(0)\n                                    dispatch(UpdateComment(cmnt.id,post_id, comment))\n                                }\n                                console.log(index);\n                            }}>Edit</Button>\n                            {index === 1 ? <textarea type='text' placeholder=\"How u wanna edit comment\" value={comment} onChange={e=>setComment(e.target.value)}/> : <></>}\n                            <Button variant=\"outlined\" className={style.DeleteButtonComment} sx={{float:\"right\"}} endIcon={<DeleteIcon/>} onClick={() => {\n                                dispatch(DeletComment(cmnt.id,post_id))\n                            }}>Delete</Button>\n                            </>\n                            :\n                            <></>\n                        }\n                        <p className={style.Commenttime}>{moment(cmnt.time).fromNow()}</p>\n                    </div>\n                    )}\n                </>\n            }\n            </>\n        )\n    }\n}\n\nexport default  CommentsForPost","/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/api/CommentsApi.js",[],[],"/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/components/pages/UserPage.js",["367"],[],"import React, { useEffect,useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { deletePost, getPosts, getPostsByCategory } from \"../../action/PostAction\";\nimport { getRatingUser, getUser, UpdateAvatar, UpdateUser } from \"../../action/UserAction\";\nimport jwt_decode from 'jwt-decode'\nimport Pagination from \"./Pagination/Pagination\";\nimport { getCategories } from \"../../action/CategoryAction\";\nimport moment from 'moment'\nimport style from '../style/UserPage/UserPage.module.css'\nimport {Button} from '@mui/material'\nimport DeleteIcon from '@mui/icons-material/Delete'\nimport EditIcon from '@mui/icons-material/Edit';\n\nconst urls = [\n    'https://images.unsplash.com/photo-1549631998-6d554b1402ae?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2128&q=80',\n    'https://images.unsplash.com/photo-1451187580459-43490279c0fa?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1172&q=80',\n    'https://images.unsplash.com/photo-1614732414444-096e5f1122d5?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1074&q=80',\n    'https://images.unsplash.com/photo-1630839437035-dac17da580d0?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1615&q=80',\n    'https://images.unsplash.com/photo-1630694093867-4b947d812bf0?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1615&q=80'\n]\nconst UserPage = () => {\n    const {id} = useParams()\n    const history = useHistory()\n    let [login, setLogin] = useState('')\n    let [email, setEmail] = useState('')\n    let [full_name, setFull_name] = useState('')\n    let [index, setIndex] = useState(0)\n    let [index_Of_Login, setIndexOfLogin] = useState(0)\n    let [index_Of_Email, setIndexOfEmail] = useState(0)\n    let [indexOfAvatar, setIndexOfAvatar] = useState(0)\n    let [file, setFile] = useState('')\n    let [currentPage, setCurrentPage] = useState(1)\n    let [postPerPage] = useState(5)\n\n    const data = useSelector(state=>state.User)\n    const post = useSelector(store => store.Post)\n    const auth = useSelector(state=>state.Auth)\n    const categorieSelector = useSelector(state => state.Category)\n\n    const indexOfLastPost = currentPage * postPerPage\n    const indexOfFirstPost = indexOfLastPost - postPerPage\n    const token = auth.token\n    const decode = jwt_decode(token)\n    const user_id = decode.id\n\n    const pagination = (pageNumber) => {setCurrentPage(pageNumber)}\n    const dispatch = useDispatch()\n    useEffect( () => {\n        dispatch(getRatingUser(id))\n        dispatch(getCategories())\n        dispatch(getUser(id))\n        dispatch(getPosts())\n    }, [dispatch])\n\n    let user = data.user\n    let allPost = post.allPost \n    let categorie = categorieSelector.categories\n    let rating = data.rating\n    \n    if (rating === undefined) {\n        rating = []\n    }\n    if (categorie === undefined) {\n        categorie = []\n    }\n    if (allPost === undefined) {\n        allPost = []\n    }\n    if (user.length === 0) {\n        <div>Loading</div>\n    }\n    else {\n        const CurrentPost = allPost.slice(indexOfFirstPost, indexOfLastPost)\n        return (\n            <div className={style.MainDivUser}>\n                {user_id === user[0].id ? \n                    <>\n                        <div className={style.UserDiv}>\n                            <img alt='avatar' src={`http://localhost:3001/avatar/${user[0].photo}`}/>\n                            <button onClick={ () => {\n                                if (indexOfAvatar === 0) {\n                                    setIndexOfAvatar(1)\n                                }\n                                if (indexOfAvatar === 1) {\n                                    setIndexOfAvatar(0)\n                                    dispatch(UpdateAvatar(id, file))\n                                }\n                            }} className={style.ButtonUserAvatar}>Update avatar</button>\n                            {indexOfAvatar  === 1 ? \n                                <><input type=\"file\" name=\"photo\" onChange = { e => setFile(e.target.files[0])}/></>\n                                :\n                                <></>\n                            }\n                            <p>Full name: {index === 1 ? <input type='text' placeholder=\"Enter new full name\" value={full_name} onChange={ e => setFull_name(e.target.value)}></input>\n                            : \n                            user[0].full_name}\n                            <EditIcon sx={{marginLeft:\"5px\",cursor:\"pointer\"}} onClick={ () => {\n                                if (index === 0) {\n                                    setIndex(1)\n                                }\n                                if (index === 1) {\n                                    setIndex(0)\n                                    dispatch(UpdateUser(id, login,email,full_name))\n                                }\n                            }}>Update</EditIcon>\n                            </p>\n                            <p>Login: {index_Of_Login === 1 ?  \n                            <input type='text' placeholder=\"Enter new login\" value={login} onChange={ e => setLogin(e.target.value)}></input>\n                            : user[0].login}\n                            <EditIcon sx={{marginLeft:\"5px\",cursor:\"pointer\"}} onClick={ () => {\n                                if (index_Of_Login === 0) {\n                                    setIndexOfLogin(1)\n                                }\n                                if (index_Of_Login === 1) {\n                                    setIndexOfLogin(0)\n                                    dispatch(UpdateUser(id, login,email,full_name))\n                                }\n                            }}>Update</EditIcon>\n                            </p>\n                            <p>Email: {index_Of_Email === 1 ? \n                            <input type='email' placeholder=\"Enter new email\" value={email} onChange={ e => setEmail(e.target.value)}></input>\n                            : \n                            user[0].email}\n                            <EditIcon sx={{marginLeft:\"5px\",cursor:\"pointer\"}} onClick={ () => {\n                                if (index_Of_Email === 0) {\n                                    setIndexOfEmail(1)\n                                }\n                                if (index_Of_Email === 1) {\n                                    setIndexOfEmail(0)\n                                    dispatch(UpdateUser(id, login,email,full_name))\n                                }\n                            }}>Update</EditIcon>\n                            </p>\n                            <p>Role: {user[0].role}</p>\n                            <p>Rating: {rating.length}</p>\n                        </div>\n                        <div className={style.PostDiv}>\n                            <div className={style.DivCategory}>\n                            <p>Sort:</p>\n                                <div onChange={ e => dispatch({type:e.target.value, payload:allPost})}>\n                                    <input value={'getposts'} type='radio' name= 'sort' id='default'></input>\n                                    <label htmlFor='default'>The newest</label>\n                                    <input value={'sortbyold'} type='radio' name ='sort' id='old'></input>\n                                    <label htmlFor='old'>The oldest</label>\n                                </div>\n                                <div onChange={ e => dispatch(getPostsByCategory(e.target.value))}>\n                                    <p>Choose category:</p>\n                                    <input type ='radio' name = 'category' id = 'all' value = 'all' />\n                                    <label htmlFor='all'>All posts</label>\n                                    {categorie.map( (category) =>\n                                        <>\n                                            <input type ='radio' name = 'category' id = {category.id} value = {category.id} />\n                                            <label htmlFor={category.id}>{category.title}</label>\n                                        </>\n                                    )}\n                                </div>\n                            </div>\n                            {CurrentPost.map( (posts) => \n                                <div key={posts.id} className  = {style.AllpostDiv}> \n                                    {posts.user_id === user[0].id ?\n                                        <div style={{backgroundImage:`url(${urls[0]})`}} className={style.PostPartDiv}>\n                                            <div onClick = { () => history.push(`/post/${posts.id}`)} className={style.divHref}>\n                                                <p className={style.titlePost}>{posts.title}</p>\n                                                <p className={style.contentPost}>Content: {posts.info.substring(0,15).concat('...')}</p>\n                                                <p className={style.timePost}>{moment(posts.time).fromNow()}</p>\n                                            </div>\n                                            <Button variant=\"outlined\" className={style.ButtonDelete} startIcon={<DeleteIcon />} onClick={ () => {dispatch(deletePost(posts.id))}}>Delete</Button> \n                                        </div> \n                                        :\n                                        <></>\n                                    }\n                                </div>\n                            )}\n                            <Pagination paginate={pagination} postPerPage={postPerPage} totalPost ={allPost.length} />\n                        </div>\n                    </>\n                    :\n                    <>\n                        <div className={style.UserDiv}>\n                            <img alt='avatar' src={`http://localhost:3001/avatar/${user[0].photo}`}/>\n                            <p>Full name: {user[0].full_name}</p>\n                            <p>Login: {user[0].login}</p>\n                            <p>Email: {user[0].email}</p>\n                            <p>Role: {user[0].role}</p>\n                            <p>Rating: {rating.length}</p>\n                        </div>\n                        <div className={style.PostDiv}>\n                        <div className={style.DivCategory}>\n                            <p>Sort:</p>\n                                <div onChange={ e => dispatch({type:e.target.value, payload:allPost})}>\n                                    <input value={'getposts'} type='radio' name= 'sort' id='default'></input>\n                                    <label htmlFor='default'>The newest</label>\n                                    <input value={'sortbyold'} type='radio' name ='sort' id='old'></input>\n                                    <label htmlFor='old'>The oldest</label>\n                                </div>\n                                <div onChange={ e => dispatch(getPostsByCategory(e.target.value))}>\n                                    <p>Choose category:</p>\n                                    <input type ='radio' name = 'category' id = 'all' value = 'all' />\n                                    <label htmlFor='all'>All posts</label>\n                                    {categorie.map( (category) =>\n                                        <>\n                                            <input type ='radio' name = 'category' id = {category.id} value = {category.id} />\n                                            <label htmlFor={category.id}>{category.title}</label>\n                                        </>\n                                    )}\n                                </div>\n                            </div>\n                            {CurrentPost.map( (posts) => \n                                <div key={posts.id} className  = {style.AllpostDiv}> \n                                    {posts.user_id === user[0].id ?\n                                        <div style={{backgroundImage:`url(${urls[0]})`}} className={style.PostPartDiv}>\n                                            <div onClick = { () => history.push(`/post/${posts.id}`)} className={style.divHref}>\n                                                <p className={style.titlePost}>{posts.title}</p>\n                                                <p className={style.contentPost}> Content: {posts.info.substring(0,15).concat('...')}</p>\n                                                <p className={style.timePost}>{moment(posts.time).fromNow()}</p>\n                                            </div>\n                                            \n                                        </div> \n                                        :\n                                        <></>\n                                    }\n                                </div>\n                            )}\n                            <Pagination paginate={pagination} postPerPage={postPerPage} totalPost ={allPost.length}/>\n                        </div>\n                    </>\n                }\n            </div>\n        )\n    }\n}\n\nexport default UserPage","/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/reducers/UserReducer.js",[],[],"/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/action/UserAction.js",["368"],[],"import { delUser, getAllU, getRating, getUserById, updateAva, updateinfo } from \"../api/UserApi\"\n\nexport const getUser = (id) => async(dispatch) => {\n    try {\n        const {data} = await getUserById(id)\n        return dispatch({type:'getUser', payload:data.result})\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const getAllUsers = () => async(dispatch) => {\n    try {\n        const {data} = await getAllU()\n        return dispatch({type:'getAllUsers', payload: data.result})\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const getRatingUser = (id) => async(dispatch) => {\n    try {\n        const {data} = await getRating(id)\n        return dispatch({type:'getrating', payload: data.result})\n    } catch (error) {\n        return dispatch({type:'getrating', payload: []})\n        console.log(error);\n    }\n}\n\nexport const UpdateUser = (id,login,email,full_name,password,avatar,role) => async(dispatch) => {\n    try {\n        const {data} = await updateinfo(id,login,email,full_name,password,avatar,role)\n        if (data.result.affectedRows > 0) {\n            const Data = await getUserById(id)\n            return dispatch({type:'updateUser', payload:Data.data.result})\n        }\n        console.log(data);\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const UpdateAvatar = (id, photo) => async(dispatch) => {\n    try {\n        const {data} = await updateAva(id, photo)\n        if (data.result.affectedRows > 0) {\n            const Data = await getUserById(id)\n            return dispatch({type:'updateAvatar', payload:Data.data.result})\n        }\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const deleteUser = (id) => async(dispatch) => {\n    try {\n        const {data} = await delUser(id)\n        console.log(data);\n        if (data.result.affectedRows > 0) {\n            const Data = await getAllU()\n            console.log(Data);\n            return dispatch({type:'deleteUser', payload:Data.data.result})\n        }\n    } catch (error) {\n        \n    }\n}","/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/api/UserApi.js",[],[],"/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/reducers/CategoryReducer.js",[],[],"/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/action/CategoryAction.js",[],[],"/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/api/CategoryApi.js",[],[],"/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/components/pages/PostComponents/GetCategory.js",["369"],[],"import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getCategory } from \"../../../action/PostAction\";\n\nconst Category = (prop) => {\n    const {post_id} = prop\n    const dispatch = useDispatch()\n    const state = useSelector(store => store.Post)\n    useEffect( () => {\n        dispatch(getCategory(post_id))\n    }, [dispatch])\n    let category = state.category\n    if (category === undefined) {\n        category = []\n    }\n    else {\n        return (\n            <>\n                <p style={{marginLeft:\"4%\",fontSize:\"30px\"}}>Category: {category[0].title}</p>\n            </>\n        )\n    }\n}\n\n\nexport default Category","/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/reducers/CommentReducer.js",[],[],"/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/components/pages/Pagination/Pagination.js",["370"],[],"import React, { useState } from \"react\";\nimport style from '../../style/Pagination/Pagination.module.css'\n\nconst Pagination = ({postPerPage, totalPost, paginate}) => {\n    const pageNumbers = []\n    let [indexx,setIndex] = useState(0)\n    for (let index = 1; index <= Math.ceil(totalPost/postPerPage); index++) {\n        pageNumbers.push(index)\n    }\n    console.log(indexx);\n    return (\n        <>\n            <ul className={style.Pagination}>\n                {pageNumbers.map( number => (\n                    <li key={number} onClick = {e => setIndex(1)} className={indexx===1 ? \"active\" : null}>\n                        <a onClick={ () => {\n                            paginate(number)\n                        }}>{number}</a>\n                    </li>\n                ))}\n            </ul>\n        </>\n    )\n}\n\nexport default Pagination","/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/components/pages/AllUsers.js",[],[],"/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/components/pages/CategoryPageForAdmin.js",[],[],"/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/components/pages/ResetPassword.js",["371"],[],"import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport {Reset_Password } from \"../../action/AuthAction\";\nimport style from '../style/UserForm/ResetPassword.module.css'\n\nconst ResetPassword = () => {\n    const history = useHistory()\n    const dispatch = useDispatch()\n    let [email, setEmail] = useState('')\n    let [index, setIndex] = useState(0)\n\n    return (\n        <div className={style.divResetPassword}>\n            <h1>Reset password</h1>\n            <p>E-mail: \n            <input autoFocus required \n                placeholder=\"Enter your email\"\n                value = {email} type=\"email\" \n                onChange={ e => setEmail(e.target.value)} />\n            </p>\n            <a onClick={()=>{history.push(\"/login\")}}>Remember login?</a>\n            <button onClick={ () => {\n                setIndex(1)\n                dispatch(Reset_Password(email))\n            }\n            }>Reset Password</button>\n            {index === 1 ? <p className={style.sendEmailP}>Mail was send. Check your email</p> : <></>}\n        </div>\n    )\n}\n\nexport default ResetPassword","/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/src/components/pages/TokenConfirm.js",[],[],"/home/firemort/Рабочий стол/Fullstack/chronos/idashchenk/clients/src/index.js",["372"],[],"/home/firemort/Рабочий стол/Fullstack/chronos/idashchenk/clients/src/App.js",["373","374","375"],[],"/home/firemort/Рабочий стол/Fullstack/chronos/idashchenk/clients/src/reducers/Reducer.js",[],[],"/home/firemort/Рабочий стол/Fullstack/chronos/idashchenk/clients/src/components/AppRoute.js",["376"],[],"/home/firemort/Рабочий стол/Fullstack/chronos/idashchenk/clients/src/reducers/AuthReducer.js",[],[],"/home/firemort/Рабочий стол/Fullstack/chronos/idashchenk/clients/src/reducers/UserReducer.js",[],[],"/home/firemort/Рабочий стол/Fullstack/chronos/idashchenk/clients/src/routes/Route.js",[],[],"/home/firemort/Рабочий стол/Fullstack/chronos/idashchenk/clients/src/components/pages/ResetPassword.js",["377"],[],"/home/firemort/Рабочий стол/Fullstack/chronos/idashchenk/clients/src/components/pages/LoginPage.js",["378","379","380"],[],"/home/firemort/Рабочий стол/Fullstack/chronos/idashchenk/clients/src/components/pages/TokenConfirm.js",[],[],"/home/firemort/Рабочий стол/Fullstack/chronos/idashchenk/clients/src/action/AuthAction.js",["381"],[],"/home/firemort/Рабочий стол/Fullstack/chronos/idashchenk/clients/src/api/AuthApi.js",[],[],"/home/firemort/Рабочий стол/Fullstack/chronos/idashchenk/clients/src/components/pages/RegisterPage.js",["382"],[],"/home/firemort/Рабочий стол/Fullstack/chronos/idashchenk/clients/src/components/pages/Navbar.js",["383","384","385","386","387","388","389","390","391","392","393"],[],"/home/firemort/Рабочий стол/Fullstack/chronos/idashchenk/clients/src/components/pages/Homepage.js",[],[],"/home/firemort/Рабочий стол/Fullstack/CHRONOS/clients/src/index.js",["394"],[],"/home/firemort/Рабочий стол/Fullstack/CHRONOS/clients/src/App.js",["395","396","397"],[],"/home/firemort/Рабочий стол/Fullstack/CHRONOS/clients/src/reducers/Reducer.js",[],[],"/home/firemort/Рабочий стол/Fullstack/CHRONOS/clients/src/components/AppRoute.js",["398"],[],"/home/firemort/Рабочий стол/Fullstack/CHRONOS/clients/src/reducers/AuthReducer.js",[],[],"/home/firemort/Рабочий стол/Fullstack/CHRONOS/clients/src/routes/Route.js",[],[],"/home/firemort/Рабочий стол/Fullstack/CHRONOS/clients/src/components/pages/Navbar.js",["399","400","401","402","403","404","405","406","407","408","409"],[],"/home/firemort/Рабочий стол/Fullstack/CHRONOS/clients/src/components/pages/Homepage.js",[],[],"/home/firemort/Рабочий стол/Fullstack/CHRONOS/clients/src/components/pages/TokenConfirm.js",[],[],"/home/firemort/Рабочий стол/Fullstack/CHRONOS/clients/src/components/pages/RegisterPage.js",["410"],[],"/home/firemort/Рабочий стол/Fullstack/CHRONOS/clients/src/components/pages/LoginPage.js",["411","412","413"],[],"/home/firemort/Рабочий стол/Fullstack/CHRONOS/clients/src/components/pages/ResetPassword.js",["414"],[],"/home/firemort/Рабочий стол/Fullstack/CHRONOS/clients/src/action/AuthAction.js",["415"],[],"/home/firemort/Рабочий стол/Fullstack/CHRONOS/clients/src/api/AuthApi.js",[],[],{"ruleId":"416","severity":1,"message":"417","line":1,"column":17,"nodeType":"418","messageId":"419","endLine":1,"endColumn":30},{"ruleId":"416","severity":1,"message":"420","line":8,"column":8,"nodeType":"418","messageId":"419","endLine":8,"endColumn":18},{"ruleId":"416","severity":1,"message":"421","line":11,"column":9,"nodeType":"418","messageId":"419","endLine":11,"endColumn":17},{"ruleId":"416","severity":1,"message":"422","line":21,"column":9,"nodeType":"418","messageId":"419","endLine":21,"endColumn":16},{"ruleId":"416","severity":1,"message":"422","line":8,"column":11,"nodeType":"418","messageId":"419","endLine":8,"endColumn":18},{"ruleId":"416","severity":1,"message":"423","line":4,"column":45,"nodeType":"418","messageId":"419","endLine":4,"endColumn":53},{"ruleId":"424","severity":1,"message":"425","line":37,"column":8,"nodeType":"426","endLine":37,"endColumn":18,"suggestions":"427"},{"ruleId":"428","severity":1,"message":"429","line":75,"column":33,"nodeType":"430","endLine":75,"endColumn":125},{"ruleId":"428","severity":1,"message":"429","line":121,"column":33,"nodeType":"430","endLine":121,"endColumn":125},{"ruleId":"416","severity":1,"message":"431","line":1,"column":17,"nodeType":"418","messageId":"419","endLine":1,"endColumn":27},{"ruleId":"428","severity":1,"message":"429","line":46,"column":25,"nodeType":"430","endLine":46,"endColumn":98},{"ruleId":"428","severity":1,"message":"429","line":47,"column":25,"nodeType":"430","endLine":47,"endColumn":105},{"ruleId":"428","severity":1,"message":"429","line":53,"column":25,"nodeType":"430","endLine":53,"endColumn":98},{"ruleId":"416","severity":1,"message":"432","line":4,"column":10,"nodeType":"418","messageId":"419","endLine":4,"endColumn":20},{"ruleId":"416","severity":1,"message":"433","line":4,"column":9,"nodeType":"418","messageId":"419","endLine":4,"endColumn":17},{"ruleId":"428","severity":1,"message":"429","line":50,"column":60,"nodeType":"430","endLine":50,"endColumn":127},{"ruleId":"428","severity":1,"message":"429","line":51,"column":60,"nodeType":"430","endLine":51,"endColumn":128},{"ruleId":"428","severity":1,"message":"429","line":52,"column":60,"nodeType":"430","endLine":52,"endColumn":133},{"ruleId":"428","severity":1,"message":"429","line":53,"column":65,"nodeType":"430","endLine":54,"endColumn":88},{"ruleId":"428","severity":1,"message":"429","line":69,"column":60,"nodeType":"430","endLine":69,"endColumn":127},{"ruleId":"428","severity":1,"message":"429","line":70,"column":60,"nodeType":"430","endLine":70,"endColumn":128},{"ruleId":"428","severity":1,"message":"429","line":71,"column":64,"nodeType":"430","endLine":73,"endColumn":68},{"ruleId":"428","severity":1,"message":"429","line":91,"column":52,"nodeType":"430","endLine":91,"endColumn":119},{"ruleId":"428","severity":1,"message":"429","line":92,"column":52,"nodeType":"430","endLine":92,"endColumn":123},{"ruleId":"428","severity":1,"message":"429","line":93,"column":60,"nodeType":"430","endLine":93,"endColumn":131},{"ruleId":"428","severity":1,"message":"429","line":94,"column":52,"nodeType":"430","endLine":94,"endColumn":120},{"ruleId":"434","severity":1,"message":"435","line":39,"column":15,"nodeType":"436","messageId":"437","endLine":39,"endColumn":17},{"ruleId":"428","severity":1,"message":"429","line":76,"column":29,"nodeType":"430","endLine":76,"endColumn":106},{"ruleId":"428","severity":1,"message":"429","line":119,"column":49,"nodeType":"430","endLine":119,"endColumn":137},{"ruleId":"428","severity":1,"message":"429","line":185,"column":49,"nodeType":"430","endLine":185,"endColumn":137},{"ruleId":"438","severity":1,"message":"439","line":75,"column":9,"nodeType":"440","messageId":"441","endLine":75,"endColumn":28},{"ruleId":"416","severity":1,"message":"442","line":107,"column":16,"nodeType":"418","messageId":"419","endLine":107,"endColumn":20},{"ruleId":"416","severity":1,"message":"443","line":2,"column":23,"nodeType":"418","messageId":"419","endLine":2,"endColumn":34},{"ruleId":"424","severity":1,"message":"425","line":12,"column":8,"nodeType":"426","endLine":12,"endColumn":18,"suggestions":"444"},{"ruleId":"428","severity":1,"message":"429","line":46,"column":29,"nodeType":"430","endLine":46,"endColumn":121},{"ruleId":"428","severity":1,"message":"429","line":76,"column":25,"nodeType":"430","endLine":76,"endColumn":117},{"ruleId":"424","severity":1,"message":"425","line":54,"column":8,"nodeType":"426","endLine":54,"endColumn":18,"suggestions":"445"},{"ruleId":"438","severity":1,"message":"439","line":27,"column":9,"nodeType":"440","messageId":"441","endLine":27,"endColumn":28},{"ruleId":"424","severity":1,"message":"446","line":11,"column":8,"nodeType":"426","endLine":11,"endColumn":18,"suggestions":"447"},{"ruleId":"428","severity":1,"message":"429","line":16,"column":25,"nodeType":"430","endLine":18,"endColumn":28},{"ruleId":"428","severity":1,"message":"429","line":22,"column":13,"nodeType":"430","endLine":22,"endColumn":55},{"ruleId":"416","severity":1,"message":"417","line":1,"column":17,"nodeType":"418","messageId":"419","endLine":1,"endColumn":30},{"ruleId":"416","severity":1,"message":"420","line":8,"column":8,"nodeType":"418","messageId":"419","endLine":8,"endColumn":18},{"ruleId":"416","severity":1,"message":"421","line":11,"column":9,"nodeType":"418","messageId":"419","endLine":11,"endColumn":17},{"ruleId":"416","severity":1,"message":"422","line":21,"column":9,"nodeType":"418","messageId":"419","endLine":21,"endColumn":16},{"ruleId":"416","severity":1,"message":"422","line":8,"column":11,"nodeType":"418","messageId":"419","endLine":8,"endColumn":18},{"ruleId":"428","severity":1,"message":"429","line":22,"column":13,"nodeType":"430","endLine":22,"endColumn":55},{"ruleId":"416","severity":1,"message":"431","line":1,"column":17,"nodeType":"418","messageId":"419","endLine":1,"endColumn":27},{"ruleId":"428","severity":1,"message":"429","line":46,"column":25,"nodeType":"430","endLine":46,"endColumn":98},{"ruleId":"428","severity":1,"message":"429","line":47,"column":25,"nodeType":"430","endLine":47,"endColumn":105},{"ruleId":"416","severity":1,"message":"432","line":4,"column":10,"nodeType":"418","messageId":"419","endLine":4,"endColumn":20},{"ruleId":"428","severity":1,"message":"429","line":53,"column":25,"nodeType":"430","endLine":53,"endColumn":98},{"ruleId":"428","severity":1,"message":"429","line":49,"column":60,"nodeType":"430","endLine":49,"endColumn":127},{"ruleId":"428","severity":1,"message":"429","line":50,"column":60,"nodeType":"430","endLine":50,"endColumn":128},{"ruleId":"428","severity":1,"message":"429","line":51,"column":60,"nodeType":"430","endLine":51,"endColumn":133},{"ruleId":"428","severity":1,"message":"429","line":52,"column":65,"nodeType":"430","endLine":53,"endColumn":88},{"ruleId":"428","severity":1,"message":"429","line":68,"column":60,"nodeType":"430","endLine":68,"endColumn":127},{"ruleId":"428","severity":1,"message":"429","line":69,"column":60,"nodeType":"430","endLine":69,"endColumn":128},{"ruleId":"428","severity":1,"message":"429","line":70,"column":64,"nodeType":"430","endLine":72,"endColumn":68},{"ruleId":"428","severity":1,"message":"429","line":90,"column":52,"nodeType":"430","endLine":90,"endColumn":119},{"ruleId":"428","severity":1,"message":"429","line":91,"column":52,"nodeType":"430","endLine":91,"endColumn":123},{"ruleId":"428","severity":1,"message":"429","line":92,"column":60,"nodeType":"430","endLine":92,"endColumn":131},{"ruleId":"428","severity":1,"message":"429","line":93,"column":52,"nodeType":"430","endLine":93,"endColumn":120},{"ruleId":"416","severity":1,"message":"417","line":1,"column":17,"nodeType":"418","messageId":"419","endLine":1,"endColumn":30},{"ruleId":"416","severity":1,"message":"420","line":8,"column":8,"nodeType":"418","messageId":"419","endLine":8,"endColumn":18},{"ruleId":"416","severity":1,"message":"421","line":11,"column":9,"nodeType":"418","messageId":"419","endLine":11,"endColumn":17},{"ruleId":"416","severity":1,"message":"422","line":21,"column":9,"nodeType":"418","messageId":"419","endLine":21,"endColumn":16},{"ruleId":"416","severity":1,"message":"422","line":8,"column":11,"nodeType":"418","messageId":"419","endLine":8,"endColumn":18},{"ruleId":"428","severity":1,"message":"429","line":49,"column":60,"nodeType":"430","endLine":49,"endColumn":127},{"ruleId":"428","severity":1,"message":"429","line":50,"column":60,"nodeType":"430","endLine":50,"endColumn":128},{"ruleId":"428","severity":1,"message":"429","line":51,"column":60,"nodeType":"430","endLine":51,"endColumn":133},{"ruleId":"428","severity":1,"message":"429","line":52,"column":65,"nodeType":"430","endLine":53,"endColumn":88},{"ruleId":"428","severity":1,"message":"429","line":68,"column":60,"nodeType":"430","endLine":68,"endColumn":127},{"ruleId":"428","severity":1,"message":"429","line":69,"column":60,"nodeType":"430","endLine":69,"endColumn":128},{"ruleId":"428","severity":1,"message":"429","line":70,"column":64,"nodeType":"430","endLine":72,"endColumn":68},{"ruleId":"428","severity":1,"message":"429","line":90,"column":52,"nodeType":"430","endLine":90,"endColumn":119},{"ruleId":"428","severity":1,"message":"429","line":91,"column":52,"nodeType":"430","endLine":91,"endColumn":123},{"ruleId":"428","severity":1,"message":"429","line":92,"column":60,"nodeType":"430","endLine":92,"endColumn":131},{"ruleId":"428","severity":1,"message":"429","line":93,"column":52,"nodeType":"430","endLine":93,"endColumn":120},{"ruleId":"428","severity":1,"message":"429","line":53,"column":25,"nodeType":"430","endLine":53,"endColumn":98},{"ruleId":"416","severity":1,"message":"431","line":1,"column":17,"nodeType":"418","messageId":"419","endLine":1,"endColumn":27},{"ruleId":"428","severity":1,"message":"429","line":46,"column":25,"nodeType":"430","endLine":46,"endColumn":98},{"ruleId":"428","severity":1,"message":"429","line":47,"column":25,"nodeType":"430","endLine":47,"endColumn":105},{"ruleId":"428","severity":1,"message":"429","line":22,"column":13,"nodeType":"430","endLine":22,"endColumn":55},{"ruleId":"416","severity":1,"message":"432","line":4,"column":10,"nodeType":"418","messageId":"419","endLine":4,"endColumn":20},"no-unused-vars","'createContext' is defined but never used.","Identifier","unusedVar","'jwt_decode' is defined but never used.","'dispatch' is assigned a value but never used.","'history' is assigned a value but never used.","'GetLikes' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["448"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'useContext' is defined but never used.","'useHistory' is defined but never used.","'observer' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode","'data' is assigned a value but never used.","'useSelector' is defined but never used.",["449"],["450"],"React Hook useEffect has a missing dependency: 'post_id'. Either include it or remove the dependency array.",["451"],{"desc":"452","fix":"453"},{"desc":"452","fix":"454"},{"desc":"452","fix":"455"},{"desc":"456","fix":"457"},"Update the dependencies array to be: [dispatch, id]",{"range":"458","text":"459"},{"range":"460","text":"459"},{"range":"461","text":"459"},"Update the dependencies array to be: [dispatch, post_id]",{"range":"462","text":"463"},[1462,1472],"[dispatch, id]",[400,410],[2796,2806],[368,378],"[dispatch, post_id]"]