{"ast":null,"code":"import arrayPush from './_arrayPush.js';\nimport isFlattenable from './_isFlattenable.js';\n/**\n * The base implementation of `_.flatten` with support for restricting flattening.\n *\n * @private\n * @param {Array} array The array to flatten.\n * @param {number} depth The maximum recursion depth.\n * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n * @param {Array} [result=[]] The initial result value.\n * @returns {Array} Returns the new flattened array.\n */\n\nfunction baseFlatten(array, depth, predicate, isStrict, result) {\n  var index = -1,\n      length = array.length;\n  predicate || (predicate = isFlattenable);\n  result || (result = []);\n\n  while (++index < length) {\n    var value = array[index];\n\n    if (depth > 0 && predicate(value)) {\n      if (depth > 1) {\n        // Recursively flatten arrays (susceptible to call stack limits).\n        baseFlatten(value, depth - 1, predicate, isStrict, result);\n      } else {\n        arrayPush(result, value);\n      }\n    } else if (!isStrict) {\n      result[result.length] = value;\n    }\n  }\n\n  return result;\n}\n\nexport default baseFlatten;","map":{"version":3,"names":["arrayPush","isFlattenable","baseFlatten","array","depth","predicate","isStrict","result","index","length","value"],"sources":["/home/firemort/Рабочий стол/Fullstack/CHRONOS/CHRONOS/clients/node_modules/lodash-es/_baseFlatten.js"],"sourcesContent":["import arrayPush from './_arrayPush.js';\nimport isFlattenable from './_isFlattenable.js';\n\n/**\n * The base implementation of `_.flatten` with support for restricting flattening.\n *\n * @private\n * @param {Array} array The array to flatten.\n * @param {number} depth The maximum recursion depth.\n * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n * @param {Array} [result=[]] The initial result value.\n * @returns {Array} Returns the new flattened array.\n */\nfunction baseFlatten(array, depth, predicate, isStrict, result) {\n  var index = -1,\n      length = array.length;\n\n  predicate || (predicate = isFlattenable);\n  result || (result = []);\n\n  while (++index < length) {\n    var value = array[index];\n    if (depth > 0 && predicate(value)) {\n      if (depth > 1) {\n        // Recursively flatten arrays (susceptible to call stack limits).\n        baseFlatten(value, depth - 1, predicate, isStrict, result);\n      } else {\n        arrayPush(result, value);\n      }\n    } else if (!isStrict) {\n      result[result.length] = value;\n    }\n  }\n  return result;\n}\n\nexport default baseFlatten;\n"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,iBAAtB;AACA,OAAOC,aAAP,MAA0B,qBAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,WAAT,CAAqBC,KAArB,EAA4BC,KAA5B,EAAmCC,SAAnC,EAA8CC,QAA9C,EAAwDC,MAAxD,EAAgE;EAC9D,IAAIC,KAAK,GAAG,CAAC,CAAb;EAAA,IACIC,MAAM,GAAGN,KAAK,CAACM,MADnB;EAGAJ,SAAS,KAAKA,SAAS,GAAGJ,aAAjB,CAAT;EACAM,MAAM,KAAKA,MAAM,GAAG,EAAd,CAAN;;EAEA,OAAO,EAAEC,KAAF,GAAUC,MAAjB,EAAyB;IACvB,IAAIC,KAAK,GAAGP,KAAK,CAACK,KAAD,CAAjB;;IACA,IAAIJ,KAAK,GAAG,CAAR,IAAaC,SAAS,CAACK,KAAD,CAA1B,EAAmC;MACjC,IAAIN,KAAK,GAAG,CAAZ,EAAe;QACb;QACAF,WAAW,CAACQ,KAAD,EAAQN,KAAK,GAAG,CAAhB,EAAmBC,SAAnB,EAA8BC,QAA9B,EAAwCC,MAAxC,CAAX;MACD,CAHD,MAGO;QACLP,SAAS,CAACO,MAAD,EAASG,KAAT,CAAT;MACD;IACF,CAPD,MAOO,IAAI,CAACJ,QAAL,EAAe;MACpBC,MAAM,CAACA,MAAM,CAACE,MAAR,CAAN,GAAwBC,KAAxB;IACD;EACF;;EACD,OAAOH,MAAP;AACD;;AAED,eAAeL,WAAf"},"metadata":{},"sourceType":"module"}