{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { useDeprecated } from \"./utils/utils\";\nimport { observable, runInAction } from \"mobx\";\nimport { useState } from \"react\";\nexport function useAsObservableSource(current) {\n  if (\"production\" !== process.env.NODE_ENV) useDeprecated(\"[mobx-react-lite] 'useAsObservableSource' is deprecated, please store the values directly in an observable, for example by using 'useLocalObservable', and sync future updates using 'useEffect' when needed. See the README for examples.\");\n\n  var _a = __read(useState(function () {\n    return observable(current, {}, {\n      deep: false\n    });\n  }), 1),\n      res = _a[0];\n\n  runInAction(function () {\n    Object.assign(res, current);\n  });\n  return res;\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,aAAT,QAA8B,eAA9B;AACA,SAASC,UAAT,EAAqBC,WAArB,QAAwC,MAAxC;AACA,SAASC,QAAT,QAAyB,OAAzB;AAEA,OAAM,SAAUC,qBAAV,CAAwDC,OAAxD,EAAwE;EAC1E,IAAI,iBAAiBC,OAAO,CAACC,GAAR,CAAYC,QAAjC,EACIR,aAAa,CACT,4OADS,CAAb;;EAGE,gBAAQG,QAAQ,CAAC;IAAM,iBAAU,CAACE,OAAD,EAAU,EAAV,EAAc;MAAEI,IAAI,EAAE;IAAR,CAAd,CAAV;EAAwC,CAA/C,CAAhB,EAAgE,CAAhE;EAAA,IAACC,GAAG,QAAJ;;EACNR,WAAW,CAAC;IACRS,MAAM,CAACC,MAAP,CAAcF,GAAd,EAAmBL,OAAnB;EACH,CAFU,CAAX;EAGA,OAAOK,GAAP;AACH","names":["useDeprecated","observable","runInAction","useState","useAsObservableSource","current","process","env","NODE_ENV","deep","res","Object","assign"],"sources":["/home/firemort/Рабочий стол/Fullstack/back-front/idashchenk/clients/node_modules/mobx-react-lite/src/useAsObservableSource.ts"],"sourcesContent":["import { useDeprecated } from \"./utils/utils\"\nimport { observable, runInAction } from \"mobx\"\nimport { useState } from \"react\"\n\nexport function useAsObservableSource<TSource extends object>(current: TSource): TSource {\n    if (\"production\" !== process.env.NODE_ENV)\n        useDeprecated(\n            \"[mobx-react-lite] 'useAsObservableSource' is deprecated, please store the values directly in an observable, for example by using 'useLocalObservable', and sync future updates using 'useEffect' when needed. See the README for examples.\"\n        )\n    const [res] = useState(() => observable(current, {}, { deep: false }))\n    runInAction(() => {\n        Object.assign(res, current)\n    })\n    return res\n}\n"]},"metadata":{},"sourceType":"module"}