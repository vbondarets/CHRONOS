{"ast":null,"code":"import { getPickersLocalization } from './utils/getPickersLocalization'; // maps ClockPickerView to its translation\n\nconst clockViews = {\n  hours: 'Stunden',\n  minutes: 'Minuten',\n  seconds: 'Sekunden'\n}; // maps PickersToolbar[\"viewType\"] to its translation\n\nconst pickerViews = {\n  calendar: 'Kalenderansicht',\n  clock: 'Uhransicht'\n};\nconst deDEPickers = {\n  // Calendar navigation\n  previousMonth: 'Letzter Monat',\n  nextMonth: 'Nächster Monat',\n  // View navigation\n  openPreviousView: 'Letzte Ansicht öffnen',\n  openNextView: 'Nächste Ansicht öffnen',\n  calendarViewSwitchingButtonAriaLabel: view => view === 'year' ? 'Jahresansicht ist geöffnet, zur Kalenderansicht wechseln' : 'Kalenderansicht ist geöffnet, zur Jahresansicht wechseln',\n  inputModeToggleButtonAriaLabel: (isKeyboardInputOpen, viewType) => isKeyboardInputOpen ? `Texteingabeansicht ist geöffnet, zur ${pickerViews[viewType]} wechseln` : `${pickerViews[viewType]} ist geöffnet, zur Texteingabeansicht wechseln`,\n  // DateRange placeholders\n  start: 'Beginn',\n  end: 'Ende',\n  // Action bar\n  cancelButtonLabel: 'Abbrechen',\n  clearButtonLabel: 'Löschen',\n  okButtonLabel: 'OK',\n  todayButtonLabel: 'Heute',\n  // Toolbar titles\n  datePickerDefaultToolbarTitle: 'Datum auswählen',\n  dateTimePickerDefaultToolbarTitle: 'Datum & Uhrzeit auswählen',\n  timePickerDefaultToolbarTitle: 'Uhrzeit auswählen',\n  dateRangePickerDefaultToolbarTitle: 'Datumsbereich auswählen',\n  // Clock labels\n  clockLabelText: (view, time, adapter) => {\n    var _clockViews$view;\n\n    return `${(_clockViews$view = clockViews[view]) != null ? _clockViews$view : view} auswählen. ${time === null ? 'Keine Uhrzeit ausgewählt' : `Gewählte Uhrzeit ist ${adapter.format(time, 'fullTime')}`}`;\n  },\n  hoursClockNumberText: hours => `${hours} ${clockViews.hours}`,\n  minutesClockNumberText: minutes => `${minutes} ${clockViews.minutes}`,\n  secondsClockNumberText: seconds => `${seconds}  ${clockViews.seconds}`,\n  // Open picker labels\n  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Datum auswählen, gewähltes Datum ist ${utils.format(utils.date(rawValue), 'fullDate')}` : 'Datum auswählen',\n  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Uhrzeit auswählen, gewählte Uhrzeit ist ${utils.format(utils.date(rawValue), 'fullTime')}` : 'Uhrzeit auswählen',\n  // Table labels\n  timeTableLabel: 'Uhrzeit auswählen',\n  dateTableLabel: 'Datum auswählen'\n};\nexport const deDE = getPickersLocalization(deDEPickers);","map":{"version":3,"names":["getPickersLocalization","clockViews","hours","minutes","seconds","pickerViews","calendar","clock","deDEPickers","previousMonth","nextMonth","openPreviousView","openNextView","calendarViewSwitchingButtonAriaLabel","view","inputModeToggleButtonAriaLabel","isKeyboardInputOpen","viewType","start","end","cancelButtonLabel","clearButtonLabel","okButtonLabel","todayButtonLabel","datePickerDefaultToolbarTitle","dateTimePickerDefaultToolbarTitle","timePickerDefaultToolbarTitle","dateRangePickerDefaultToolbarTitle","clockLabelText","time","adapter","_clockViews$view","format","hoursClockNumberText","minutesClockNumberText","secondsClockNumberText","openDatePickerDialogue","rawValue","utils","isValid","date","openTimePickerDialogue","timeTableLabel","dateTableLabel","deDE"],"sources":["/home/firemort/Рабочий стол/Fullstack/CHRONOS/Chronos2/CHRONOS/clients/node_modules/@mui/x-date-pickers/locales/deDE.js"],"sourcesContent":["import { getPickersLocalization } from './utils/getPickersLocalization';\n// maps ClockPickerView to its translation\nconst clockViews = {\n  hours: 'Stunden',\n  minutes: 'Minuten',\n  seconds: 'Sekunden'\n}; // maps PickersToolbar[\"viewType\"] to its translation\n\nconst pickerViews = {\n  calendar: 'Kalenderansicht',\n  clock: 'Uhransicht'\n};\nconst deDEPickers = {\n  // Calendar navigation\n  previousMonth: 'Letzter Monat',\n  nextMonth: 'Nächster Monat',\n  // View navigation\n  openPreviousView: 'Letzte Ansicht öffnen',\n  openNextView: 'Nächste Ansicht öffnen',\n  calendarViewSwitchingButtonAriaLabel: view => view === 'year' ? 'Jahresansicht ist geöffnet, zur Kalenderansicht wechseln' : 'Kalenderansicht ist geöffnet, zur Jahresansicht wechseln',\n  inputModeToggleButtonAriaLabel: (isKeyboardInputOpen, viewType) => isKeyboardInputOpen ? `Texteingabeansicht ist geöffnet, zur ${pickerViews[viewType]} wechseln` : `${pickerViews[viewType]} ist geöffnet, zur Texteingabeansicht wechseln`,\n  // DateRange placeholders\n  start: 'Beginn',\n  end: 'Ende',\n  // Action bar\n  cancelButtonLabel: 'Abbrechen',\n  clearButtonLabel: 'Löschen',\n  okButtonLabel: 'OK',\n  todayButtonLabel: 'Heute',\n  // Toolbar titles\n  datePickerDefaultToolbarTitle: 'Datum auswählen',\n  dateTimePickerDefaultToolbarTitle: 'Datum & Uhrzeit auswählen',\n  timePickerDefaultToolbarTitle: 'Uhrzeit auswählen',\n  dateRangePickerDefaultToolbarTitle: 'Datumsbereich auswählen',\n  // Clock labels\n  clockLabelText: (view, time, adapter) => {\n    var _clockViews$view;\n\n    return `${(_clockViews$view = clockViews[view]) != null ? _clockViews$view : view} auswählen. ${time === null ? 'Keine Uhrzeit ausgewählt' : `Gewählte Uhrzeit ist ${adapter.format(time, 'fullTime')}`}`;\n  },\n  hoursClockNumberText: hours => `${hours} ${clockViews.hours}`,\n  minutesClockNumberText: minutes => `${minutes} ${clockViews.minutes}`,\n  secondsClockNumberText: seconds => `${seconds}  ${clockViews.seconds}`,\n  // Open picker labels\n  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Datum auswählen, gewähltes Datum ist ${utils.format(utils.date(rawValue), 'fullDate')}` : 'Datum auswählen',\n  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Uhrzeit auswählen, gewählte Uhrzeit ist ${utils.format(utils.date(rawValue), 'fullTime')}` : 'Uhrzeit auswählen',\n  // Table labels\n  timeTableLabel: 'Uhrzeit auswählen',\n  dateTableLabel: 'Datum auswählen'\n};\nexport const deDE = getPickersLocalization(deDEPickers);"],"mappings":"AAAA,SAASA,sBAAT,QAAuC,gCAAvC,C,CACA;;AACA,MAAMC,UAAU,GAAG;EACjBC,KAAK,EAAE,SADU;EAEjBC,OAAO,EAAE,SAFQ;EAGjBC,OAAO,EAAE;AAHQ,CAAnB,C,CAIG;;AAEH,MAAMC,WAAW,GAAG;EAClBC,QAAQ,EAAE,iBADQ;EAElBC,KAAK,EAAE;AAFW,CAApB;AAIA,MAAMC,WAAW,GAAG;EAClB;EACAC,aAAa,EAAE,eAFG;EAGlBC,SAAS,EAAE,gBAHO;EAIlB;EACAC,gBAAgB,EAAE,uBALA;EAMlBC,YAAY,EAAE,wBANI;EAOlBC,oCAAoC,EAAEC,IAAI,IAAIA,IAAI,KAAK,MAAT,GAAkB,0DAAlB,GAA+E,0DAP3G;EAQlBC,8BAA8B,EAAE,CAACC,mBAAD,EAAsBC,QAAtB,KAAmCD,mBAAmB,GAAI,wCAAuCX,WAAW,CAACY,QAAD,CAAW,WAAjE,GAA+E,GAAEZ,WAAW,CAACY,QAAD,CAAW,gDAR3K;EASlB;EACAC,KAAK,EAAE,QAVW;EAWlBC,GAAG,EAAE,MAXa;EAYlB;EACAC,iBAAiB,EAAE,WAbD;EAclBC,gBAAgB,EAAE,SAdA;EAelBC,aAAa,EAAE,IAfG;EAgBlBC,gBAAgB,EAAE,OAhBA;EAiBlB;EACAC,6BAA6B,EAAE,iBAlBb;EAmBlBC,iCAAiC,EAAE,2BAnBjB;EAoBlBC,6BAA6B,EAAE,mBApBb;EAqBlBC,kCAAkC,EAAE,yBArBlB;EAsBlB;EACAC,cAAc,EAAE,CAACd,IAAD,EAAOe,IAAP,EAAaC,OAAb,KAAyB;IACvC,IAAIC,gBAAJ;;IAEA,OAAQ,GAAE,CAACA,gBAAgB,GAAG9B,UAAU,CAACa,IAAD,CAA9B,KAAyC,IAAzC,GAAgDiB,gBAAhD,GAAmEjB,IAAK,eAAce,IAAI,KAAK,IAAT,GAAgB,0BAAhB,GAA8C,wBAAuBC,OAAO,CAACE,MAAR,CAAeH,IAAf,EAAqB,UAArB,CAAiC,EAAE,EAAxM;EACD,CA3BiB;EA4BlBI,oBAAoB,EAAE/B,KAAK,IAAK,GAAEA,KAAM,IAAGD,UAAU,CAACC,KAAM,EA5B1C;EA6BlBgC,sBAAsB,EAAE/B,OAAO,IAAK,GAAEA,OAAQ,IAAGF,UAAU,CAACE,OAAQ,EA7BlD;EA8BlBgC,sBAAsB,EAAE/B,OAAO,IAAK,GAAEA,OAAQ,KAAIH,UAAU,CAACG,OAAQ,EA9BnD;EA+BlB;EACAgC,sBAAsB,EAAE,CAACC,QAAD,EAAWC,KAAX,KAAqBD,QAAQ,IAAIC,KAAK,CAACC,OAAN,CAAcD,KAAK,CAACE,IAAN,CAAWH,QAAX,CAAd,CAAZ,GAAmD,wCAAuCC,KAAK,CAACN,MAAN,CAAaM,KAAK,CAACE,IAAN,CAAWH,QAAX,CAAb,EAAmC,UAAnC,CAA+C,EAAzI,GAA6I,iBAhCxK;EAiClBI,sBAAsB,EAAE,CAACJ,QAAD,EAAWC,KAAX,KAAqBD,QAAQ,IAAIC,KAAK,CAACC,OAAN,CAAcD,KAAK,CAACE,IAAN,CAAWH,QAAX,CAAd,CAAZ,GAAmD,2CAA0CC,KAAK,CAACN,MAAN,CAAaM,KAAK,CAACE,IAAN,CAAWH,QAAX,CAAb,EAAmC,UAAnC,CAA+C,EAA5I,GAAgJ,mBAjC3K;EAkClB;EACAK,cAAc,EAAE,mBAnCE;EAoClBC,cAAc,EAAE;AApCE,CAApB;AAsCA,OAAO,MAAMC,IAAI,GAAG5C,sBAAsB,CAACQ,WAAD,CAAnC"},"metadata":{},"sourceType":"module"}