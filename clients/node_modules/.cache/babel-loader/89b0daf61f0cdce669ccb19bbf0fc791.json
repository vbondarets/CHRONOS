{"ast":null,"code":"import baseSlice from './_baseSlice.js';\nimport isIterateeCall from './_isIterateeCall.js';\nimport toInteger from './toInteger.js';\n/* Built-in method references for those with the same name as other `lodash` methods. */\n\nvar nativeCeil = Math.ceil,\n    nativeMax = Math.max;\n/**\n * Creates an array of elements split into groups the length of `size`.\n * If `array` can't be split evenly, the final chunk will be the remaining\n * elements.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Array\n * @param {Array} array The array to process.\n * @param {number} [size=1] The length of each chunk\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the new array of chunks.\n * @example\n *\n * _.chunk(['a', 'b', 'c', 'd'], 2);\n * // => [['a', 'b'], ['c', 'd']]\n *\n * _.chunk(['a', 'b', 'c', 'd'], 3);\n * // => [['a', 'b', 'c'], ['d']]\n */\n\nfunction chunk(array, size, guard) {\n  if (guard ? isIterateeCall(array, size, guard) : size === undefined) {\n    size = 1;\n  } else {\n    size = nativeMax(toInteger(size), 0);\n  }\n\n  var length = array == null ? 0 : array.length;\n\n  if (!length || size < 1) {\n    return [];\n  }\n\n  var index = 0,\n      resIndex = 0,\n      result = Array(nativeCeil(length / size));\n\n  while (index < length) {\n    result[resIndex++] = baseSlice(array, index, index += size);\n  }\n\n  return result;\n}\n\nexport default chunk;","map":{"version":3,"names":["baseSlice","isIterateeCall","toInteger","nativeCeil","Math","ceil","nativeMax","max","chunk","array","size","guard","undefined","length","index","resIndex","result","Array"],"sources":["/home/firemort/Рабочий стол/Fullstack/CHRONOS/clients/node_modules/lodash-es/chunk.js"],"sourcesContent":["import baseSlice from './_baseSlice.js';\nimport isIterateeCall from './_isIterateeCall.js';\nimport toInteger from './toInteger.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeCeil = Math.ceil,\n    nativeMax = Math.max;\n\n/**\n * Creates an array of elements split into groups the length of `size`.\n * If `array` can't be split evenly, the final chunk will be the remaining\n * elements.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Array\n * @param {Array} array The array to process.\n * @param {number} [size=1] The length of each chunk\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the new array of chunks.\n * @example\n *\n * _.chunk(['a', 'b', 'c', 'd'], 2);\n * // => [['a', 'b'], ['c', 'd']]\n *\n * _.chunk(['a', 'b', 'c', 'd'], 3);\n * // => [['a', 'b', 'c'], ['d']]\n */\nfunction chunk(array, size, guard) {\n  if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {\n    size = 1;\n  } else {\n    size = nativeMax(toInteger(size), 0);\n  }\n  var length = array == null ? 0 : array.length;\n  if (!length || size < 1) {\n    return [];\n  }\n  var index = 0,\n      resIndex = 0,\n      result = Array(nativeCeil(length / size));\n\n  while (index < length) {\n    result[resIndex++] = baseSlice(array, index, (index += size));\n  }\n  return result;\n}\n\nexport default chunk;\n"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,iBAAtB;AACA,OAAOC,cAAP,MAA2B,sBAA3B;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AAEA;;AACA,IAAIC,UAAU,GAAGC,IAAI,CAACC,IAAtB;AAAA,IACIC,SAAS,GAAGF,IAAI,CAACG,GADrB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,KAAT,CAAeC,KAAf,EAAsBC,IAAtB,EAA4BC,KAA5B,EAAmC;EACjC,IAAKA,KAAK,GAAGV,cAAc,CAACQ,KAAD,EAAQC,IAAR,EAAcC,KAAd,CAAjB,GAAwCD,IAAI,KAAKE,SAA3D,EAAuE;IACrEF,IAAI,GAAG,CAAP;EACD,CAFD,MAEO;IACLA,IAAI,GAAGJ,SAAS,CAACJ,SAAS,CAACQ,IAAD,CAAV,EAAkB,CAAlB,CAAhB;EACD;;EACD,IAAIG,MAAM,GAAGJ,KAAK,IAAI,IAAT,GAAgB,CAAhB,GAAoBA,KAAK,CAACI,MAAvC;;EACA,IAAI,CAACA,MAAD,IAAWH,IAAI,GAAG,CAAtB,EAAyB;IACvB,OAAO,EAAP;EACD;;EACD,IAAII,KAAK,GAAG,CAAZ;EAAA,IACIC,QAAQ,GAAG,CADf;EAAA,IAEIC,MAAM,GAAGC,KAAK,CAACd,UAAU,CAACU,MAAM,GAAGH,IAAV,CAAX,CAFlB;;EAIA,OAAOI,KAAK,GAAGD,MAAf,EAAuB;IACrBG,MAAM,CAACD,QAAQ,EAAT,CAAN,GAAqBf,SAAS,CAACS,KAAD,EAAQK,KAAR,EAAgBA,KAAK,IAAIJ,IAAzB,CAA9B;EACD;;EACD,OAAOM,MAAP;AACD;;AAED,eAAeR,KAAf"},"metadata":{},"sourceType":"module"}